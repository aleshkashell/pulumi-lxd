// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lxd

import (
	"context"
	"reflect"

	"errors"
	"github.com/aleshkashell/pulumi-lxd//sdk/go/lxd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Instance struct {
	pulumi.CustomResourceState

	Config      pulumi.MapOutput            `pulumi:"config"`
	Devices     InstanceDeviceArrayOutput   `pulumi:"devices"`
	Ephemeral   pulumi.BoolPtrOutput        `pulumi:"ephemeral"`
	Files       InstanceFileTypeArrayOutput `pulumi:"files"`
	Image       pulumi.StringOutput         `pulumi:"image"`
	IpAddress   pulumi.StringOutput         `pulumi:"ipAddress"`
	Ipv4Address pulumi.StringOutput         `pulumi:"ipv4Address"`
	Ipv6Address pulumi.StringOutput         `pulumi:"ipv6Address"`
	Limits      pulumi.MapOutput            `pulumi:"limits"`
	MacAddress  pulumi.StringOutput         `pulumi:"macAddress"`
	Name        pulumi.StringOutput         `pulumi:"name"`
	// Deprecated: Use a config setting of security.privileged=1 instead
	Privileged     pulumi.BoolPtrOutput     `pulumi:"privileged"`
	Profiles       pulumi.StringArrayOutput `pulumi:"profiles"`
	Project        pulumi.StringPtrOutput   `pulumi:"project"`
	Remote         pulumi.StringPtrOutput   `pulumi:"remote"`
	StartOnCreate  pulumi.BoolPtrOutput     `pulumi:"startOnCreate"`
	Status         pulumi.StringOutput      `pulumi:"status"`
	Target         pulumi.StringOutput      `pulumi:"target"`
	Type           pulumi.StringOutput      `pulumi:"type"`
	WaitForNetwork pulumi.BoolPtrOutput     `pulumi:"waitForNetwork"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Image == nil {
		return nil, errors.New("invalid value for required argument 'Image'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("lxd:index/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("lxd:index/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	Config      map[string]interface{} `pulumi:"config"`
	Devices     []InstanceDevice       `pulumi:"devices"`
	Ephemeral   *bool                  `pulumi:"ephemeral"`
	Files       []InstanceFileType     `pulumi:"files"`
	Image       *string                `pulumi:"image"`
	IpAddress   *string                `pulumi:"ipAddress"`
	Ipv4Address *string                `pulumi:"ipv4Address"`
	Ipv6Address *string                `pulumi:"ipv6Address"`
	Limits      map[string]interface{} `pulumi:"limits"`
	MacAddress  *string                `pulumi:"macAddress"`
	Name        *string                `pulumi:"name"`
	// Deprecated: Use a config setting of security.privileged=1 instead
	Privileged     *bool    `pulumi:"privileged"`
	Profiles       []string `pulumi:"profiles"`
	Project        *string  `pulumi:"project"`
	Remote         *string  `pulumi:"remote"`
	StartOnCreate  *bool    `pulumi:"startOnCreate"`
	Status         *string  `pulumi:"status"`
	Target         *string  `pulumi:"target"`
	Type           *string  `pulumi:"type"`
	WaitForNetwork *bool    `pulumi:"waitForNetwork"`
}

type InstanceState struct {
	Config      pulumi.MapInput
	Devices     InstanceDeviceArrayInput
	Ephemeral   pulumi.BoolPtrInput
	Files       InstanceFileTypeArrayInput
	Image       pulumi.StringPtrInput
	IpAddress   pulumi.StringPtrInput
	Ipv4Address pulumi.StringPtrInput
	Ipv6Address pulumi.StringPtrInput
	Limits      pulumi.MapInput
	MacAddress  pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	// Deprecated: Use a config setting of security.privileged=1 instead
	Privileged     pulumi.BoolPtrInput
	Profiles       pulumi.StringArrayInput
	Project        pulumi.StringPtrInput
	Remote         pulumi.StringPtrInput
	StartOnCreate  pulumi.BoolPtrInput
	Status         pulumi.StringPtrInput
	Target         pulumi.StringPtrInput
	Type           pulumi.StringPtrInput
	WaitForNetwork pulumi.BoolPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	Config    map[string]interface{} `pulumi:"config"`
	Devices   []InstanceDevice       `pulumi:"devices"`
	Ephemeral *bool                  `pulumi:"ephemeral"`
	Files     []InstanceFileType     `pulumi:"files"`
	Image     string                 `pulumi:"image"`
	Limits    map[string]interface{} `pulumi:"limits"`
	Name      *string                `pulumi:"name"`
	// Deprecated: Use a config setting of security.privileged=1 instead
	Privileged     *bool    `pulumi:"privileged"`
	Profiles       []string `pulumi:"profiles"`
	Project        *string  `pulumi:"project"`
	Remote         *string  `pulumi:"remote"`
	StartOnCreate  *bool    `pulumi:"startOnCreate"`
	Target         *string  `pulumi:"target"`
	Type           *string  `pulumi:"type"`
	WaitForNetwork *bool    `pulumi:"waitForNetwork"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	Config    pulumi.MapInput
	Devices   InstanceDeviceArrayInput
	Ephemeral pulumi.BoolPtrInput
	Files     InstanceFileTypeArrayInput
	Image     pulumi.StringInput
	Limits    pulumi.MapInput
	Name      pulumi.StringPtrInput
	// Deprecated: Use a config setting of security.privileged=1 instead
	Privileged     pulumi.BoolPtrInput
	Profiles       pulumi.StringArrayInput
	Project        pulumi.StringPtrInput
	Remote         pulumi.StringPtrInput
	StartOnCreate  pulumi.BoolPtrInput
	Target         pulumi.StringPtrInput
	Type           pulumi.StringPtrInput
	WaitForNetwork pulumi.BoolPtrInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

func (i *Instance) ToOutput(ctx context.Context) pulumix.Output[*Instance] {
	return pulumix.Output[*Instance]{
		OutputState: i.ToInstanceOutputWithContext(ctx).OutputState,
	}
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

func (i InstanceArray) ToOutput(ctx context.Context) pulumix.Output[[]*Instance] {
	return pulumix.Output[[]*Instance]{
		OutputState: i.ToInstanceArrayOutputWithContext(ctx).OutputState,
	}
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

func (i InstanceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Instance] {
	return pulumix.Output[map[string]*Instance]{
		OutputState: i.ToInstanceMapOutputWithContext(ctx).OutputState,
	}
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

func (o InstanceOutput) ToOutput(ctx context.Context) pulumix.Output[*Instance] {
	return pulumix.Output[*Instance]{
		OutputState: o.OutputState,
	}
}

func (o InstanceOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *Instance) pulumi.MapOutput { return v.Config }).(pulumi.MapOutput)
}

func (o InstanceOutput) Devices() InstanceDeviceArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceDeviceArrayOutput { return v.Devices }).(InstanceDeviceArrayOutput)
}

func (o InstanceOutput) Ephemeral() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.Ephemeral }).(pulumi.BoolPtrOutput)
}

func (o InstanceOutput) Files() InstanceFileTypeArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceFileTypeArrayOutput { return v.Files }).(InstanceFileTypeArrayOutput)
}

func (o InstanceOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Image }).(pulumi.StringOutput)
}

func (o InstanceOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

func (o InstanceOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Ipv4Address }).(pulumi.StringOutput)
}

func (o InstanceOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Ipv6Address }).(pulumi.StringOutput)
}

func (o InstanceOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *Instance) pulumi.MapOutput { return v.Limits }).(pulumi.MapOutput)
}

func (o InstanceOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.MacAddress }).(pulumi.StringOutput)
}

func (o InstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Deprecated: Use a config setting of security.privileged=1 instead
func (o InstanceOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.Privileged }).(pulumi.BoolPtrOutput)
}

func (o InstanceOutput) Profiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.Profiles }).(pulumi.StringArrayOutput)
}

func (o InstanceOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.Project }).(pulumi.StringPtrOutput)
}

func (o InstanceOutput) Remote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.Remote }).(pulumi.StringPtrOutput)
}

func (o InstanceOutput) StartOnCreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.StartOnCreate }).(pulumi.BoolPtrOutput)
}

func (o InstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o InstanceOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Target }).(pulumi.StringOutput)
}

func (o InstanceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o InstanceOutput) WaitForNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.WaitForNetwork }).(pulumi.BoolPtrOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Instance] {
	return pulumix.Output[[]*Instance]{
		OutputState: o.OutputState,
	}
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Instance] {
	return pulumix.Output[map[string]*Instance]{
		OutputState: o.OutputState,
	}
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
