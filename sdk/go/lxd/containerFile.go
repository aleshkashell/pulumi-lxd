// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lxd

import (
	"context"
	"reflect"

	"errors"
	"github.com/aleshkashell/pulumi-lxd/sdk/go/lxd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type ContainerFile struct {
	pulumi.CustomResourceState

	Append            pulumi.BoolPtrOutput   `pulumi:"append"`
	ContainerName     pulumi.StringOutput    `pulumi:"containerName"`
	Content           pulumi.StringPtrOutput `pulumi:"content"`
	CreateDirectories pulumi.BoolPtrOutput   `pulumi:"createDirectories"`
	Gid               pulumi.IntPtrOutput    `pulumi:"gid"`
	Mode              pulumi.StringPtrOutput `pulumi:"mode"`
	Project           pulumi.StringPtrOutput `pulumi:"project"`
	Remote            pulumi.StringPtrOutput `pulumi:"remote"`
	Source            pulumi.StringPtrOutput `pulumi:"source"`
	TargetFile        pulumi.StringOutput    `pulumi:"targetFile"`
	Uid               pulumi.IntPtrOutput    `pulumi:"uid"`
}

// NewContainerFile registers a new resource with the given unique name, arguments, and options.
func NewContainerFile(ctx *pulumi.Context,
	name string, args *ContainerFileArgs, opts ...pulumi.ResourceOption) (*ContainerFile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContainerName == nil {
		return nil, errors.New("invalid value for required argument 'ContainerName'")
	}
	if args.TargetFile == nil {
		return nil, errors.New("invalid value for required argument 'TargetFile'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContainerFile
	err := ctx.RegisterResource("lxd:index/containerFile:ContainerFile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerFile gets an existing ContainerFile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerFile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerFileState, opts ...pulumi.ResourceOption) (*ContainerFile, error) {
	var resource ContainerFile
	err := ctx.ReadResource("lxd:index/containerFile:ContainerFile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerFile resources.
type containerFileState struct {
	Append            *bool   `pulumi:"append"`
	ContainerName     *string `pulumi:"containerName"`
	Content           *string `pulumi:"content"`
	CreateDirectories *bool   `pulumi:"createDirectories"`
	Gid               *int    `pulumi:"gid"`
	Mode              *string `pulumi:"mode"`
	Project           *string `pulumi:"project"`
	Remote            *string `pulumi:"remote"`
	Source            *string `pulumi:"source"`
	TargetFile        *string `pulumi:"targetFile"`
	Uid               *int    `pulumi:"uid"`
}

type ContainerFileState struct {
	Append            pulumi.BoolPtrInput
	ContainerName     pulumi.StringPtrInput
	Content           pulumi.StringPtrInput
	CreateDirectories pulumi.BoolPtrInput
	Gid               pulumi.IntPtrInput
	Mode              pulumi.StringPtrInput
	Project           pulumi.StringPtrInput
	Remote            pulumi.StringPtrInput
	Source            pulumi.StringPtrInput
	TargetFile        pulumi.StringPtrInput
	Uid               pulumi.IntPtrInput
}

func (ContainerFileState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerFileState)(nil)).Elem()
}

type containerFileArgs struct {
	Append            *bool   `pulumi:"append"`
	ContainerName     string  `pulumi:"containerName"`
	Content           *string `pulumi:"content"`
	CreateDirectories *bool   `pulumi:"createDirectories"`
	Gid               *int    `pulumi:"gid"`
	Mode              *string `pulumi:"mode"`
	Project           *string `pulumi:"project"`
	Remote            *string `pulumi:"remote"`
	Source            *string `pulumi:"source"`
	TargetFile        string  `pulumi:"targetFile"`
	Uid               *int    `pulumi:"uid"`
}

// The set of arguments for constructing a ContainerFile resource.
type ContainerFileArgs struct {
	Append            pulumi.BoolPtrInput
	ContainerName     pulumi.StringInput
	Content           pulumi.StringPtrInput
	CreateDirectories pulumi.BoolPtrInput
	Gid               pulumi.IntPtrInput
	Mode              pulumi.StringPtrInput
	Project           pulumi.StringPtrInput
	Remote            pulumi.StringPtrInput
	Source            pulumi.StringPtrInput
	TargetFile        pulumi.StringInput
	Uid               pulumi.IntPtrInput
}

func (ContainerFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerFileArgs)(nil)).Elem()
}

type ContainerFileInput interface {
	pulumi.Input

	ToContainerFileOutput() ContainerFileOutput
	ToContainerFileOutputWithContext(ctx context.Context) ContainerFileOutput
}

func (*ContainerFile) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerFile)(nil)).Elem()
}

func (i *ContainerFile) ToContainerFileOutput() ContainerFileOutput {
	return i.ToContainerFileOutputWithContext(context.Background())
}

func (i *ContainerFile) ToContainerFileOutputWithContext(ctx context.Context) ContainerFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerFileOutput)
}

func (i *ContainerFile) ToOutput(ctx context.Context) pulumix.Output[*ContainerFile] {
	return pulumix.Output[*ContainerFile]{
		OutputState: i.ToContainerFileOutputWithContext(ctx).OutputState,
	}
}

// ContainerFileArrayInput is an input type that accepts ContainerFileArray and ContainerFileArrayOutput values.
// You can construct a concrete instance of `ContainerFileArrayInput` via:
//
//	ContainerFileArray{ ContainerFileArgs{...} }
type ContainerFileArrayInput interface {
	pulumi.Input

	ToContainerFileArrayOutput() ContainerFileArrayOutput
	ToContainerFileArrayOutputWithContext(context.Context) ContainerFileArrayOutput
}

type ContainerFileArray []ContainerFileInput

func (ContainerFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerFile)(nil)).Elem()
}

func (i ContainerFileArray) ToContainerFileArrayOutput() ContainerFileArrayOutput {
	return i.ToContainerFileArrayOutputWithContext(context.Background())
}

func (i ContainerFileArray) ToContainerFileArrayOutputWithContext(ctx context.Context) ContainerFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerFileArrayOutput)
}

func (i ContainerFileArray) ToOutput(ctx context.Context) pulumix.Output[[]*ContainerFile] {
	return pulumix.Output[[]*ContainerFile]{
		OutputState: i.ToContainerFileArrayOutputWithContext(ctx).OutputState,
	}
}

// ContainerFileMapInput is an input type that accepts ContainerFileMap and ContainerFileMapOutput values.
// You can construct a concrete instance of `ContainerFileMapInput` via:
//
//	ContainerFileMap{ "key": ContainerFileArgs{...} }
type ContainerFileMapInput interface {
	pulumi.Input

	ToContainerFileMapOutput() ContainerFileMapOutput
	ToContainerFileMapOutputWithContext(context.Context) ContainerFileMapOutput
}

type ContainerFileMap map[string]ContainerFileInput

func (ContainerFileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerFile)(nil)).Elem()
}

func (i ContainerFileMap) ToContainerFileMapOutput() ContainerFileMapOutput {
	return i.ToContainerFileMapOutputWithContext(context.Background())
}

func (i ContainerFileMap) ToContainerFileMapOutputWithContext(ctx context.Context) ContainerFileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerFileMapOutput)
}

func (i ContainerFileMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ContainerFile] {
	return pulumix.Output[map[string]*ContainerFile]{
		OutputState: i.ToContainerFileMapOutputWithContext(ctx).OutputState,
	}
}

type ContainerFileOutput struct{ *pulumi.OutputState }

func (ContainerFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerFile)(nil)).Elem()
}

func (o ContainerFileOutput) ToContainerFileOutput() ContainerFileOutput {
	return o
}

func (o ContainerFileOutput) ToContainerFileOutputWithContext(ctx context.Context) ContainerFileOutput {
	return o
}

func (o ContainerFileOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerFile] {
	return pulumix.Output[*ContainerFile]{
		OutputState: o.OutputState,
	}
}

func (o ContainerFileOutput) Append() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerFile) pulumi.BoolPtrOutput { return v.Append }).(pulumi.BoolPtrOutput)
}

func (o ContainerFileOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerFile) pulumi.StringOutput { return v.ContainerName }).(pulumi.StringOutput)
}

func (o ContainerFileOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerFile) pulumi.StringPtrOutput { return v.Content }).(pulumi.StringPtrOutput)
}

func (o ContainerFileOutput) CreateDirectories() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerFile) pulumi.BoolPtrOutput { return v.CreateDirectories }).(pulumi.BoolPtrOutput)
}

func (o ContainerFileOutput) Gid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerFile) pulumi.IntPtrOutput { return v.Gid }).(pulumi.IntPtrOutput)
}

func (o ContainerFileOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerFile) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o ContainerFileOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerFile) pulumi.StringPtrOutput { return v.Project }).(pulumi.StringPtrOutput)
}

func (o ContainerFileOutput) Remote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerFile) pulumi.StringPtrOutput { return v.Remote }).(pulumi.StringPtrOutput)
}

func (o ContainerFileOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerFile) pulumi.StringPtrOutput { return v.Source }).(pulumi.StringPtrOutput)
}

func (o ContainerFileOutput) TargetFile() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerFile) pulumi.StringOutput { return v.TargetFile }).(pulumi.StringOutput)
}

func (o ContainerFileOutput) Uid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerFile) pulumi.IntPtrOutput { return v.Uid }).(pulumi.IntPtrOutput)
}

type ContainerFileArrayOutput struct{ *pulumi.OutputState }

func (ContainerFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerFile)(nil)).Elem()
}

func (o ContainerFileArrayOutput) ToContainerFileArrayOutput() ContainerFileArrayOutput {
	return o
}

func (o ContainerFileArrayOutput) ToContainerFileArrayOutputWithContext(ctx context.Context) ContainerFileArrayOutput {
	return o
}

func (o ContainerFileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ContainerFile] {
	return pulumix.Output[[]*ContainerFile]{
		OutputState: o.OutputState,
	}
}

func (o ContainerFileArrayOutput) Index(i pulumi.IntInput) ContainerFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContainerFile {
		return vs[0].([]*ContainerFile)[vs[1].(int)]
	}).(ContainerFileOutput)
}

type ContainerFileMapOutput struct{ *pulumi.OutputState }

func (ContainerFileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerFile)(nil)).Elem()
}

func (o ContainerFileMapOutput) ToContainerFileMapOutput() ContainerFileMapOutput {
	return o
}

func (o ContainerFileMapOutput) ToContainerFileMapOutputWithContext(ctx context.Context) ContainerFileMapOutput {
	return o
}

func (o ContainerFileMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ContainerFile] {
	return pulumix.Output[map[string]*ContainerFile]{
		OutputState: o.OutputState,
	}
}

func (o ContainerFileMapOutput) MapIndex(k pulumi.StringInput) ContainerFileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContainerFile {
		return vs[0].(map[string]*ContainerFile)[vs[1].(string)]
	}).(ContainerFileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerFileInput)(nil)).Elem(), &ContainerFile{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerFileArrayInput)(nil)).Elem(), ContainerFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerFileMapInput)(nil)).Elem(), ContainerFileMap{})
	pulumi.RegisterOutputType(ContainerFileOutput{})
	pulumi.RegisterOutputType(ContainerFileArrayOutput{})
	pulumi.RegisterOutputType(ContainerFileMapOutput{})
}
