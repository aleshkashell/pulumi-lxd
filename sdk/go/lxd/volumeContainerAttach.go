// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lxd

import (
	"context"
	"reflect"

	"errors"
	"github.com/aleshkashell/pulumi-lxd/sdk/go/lxd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type VolumeContainerAttach struct {
	pulumi.CustomResourceState

	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	ContainerName pulumi.StringOutput `pulumi:"containerName"`
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	DeviceName pulumi.StringOutput `pulumi:"deviceName"`
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	Path pulumi.StringOutput `pulumi:"path"`
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	Pool pulumi.StringOutput `pulumi:"pool"`
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	Remote pulumi.StringPtrOutput `pulumi:"remote"`
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	VolumeName pulumi.StringOutput `pulumi:"volumeName"`
}

// NewVolumeContainerAttach registers a new resource with the given unique name, arguments, and options.
func NewVolumeContainerAttach(ctx *pulumi.Context,
	name string, args *VolumeContainerAttachArgs, opts ...pulumi.ResourceOption) (*VolumeContainerAttach, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContainerName == nil {
		return nil, errors.New("invalid value for required argument 'ContainerName'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.Pool == nil {
		return nil, errors.New("invalid value for required argument 'Pool'")
	}
	if args.VolumeName == nil {
		return nil, errors.New("invalid value for required argument 'VolumeName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumeContainerAttach
	err := ctx.RegisterResource("lxd:index/volumeContainerAttach:VolumeContainerAttach", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeContainerAttach gets an existing VolumeContainerAttach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeContainerAttach(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeContainerAttachState, opts ...pulumi.ResourceOption) (*VolumeContainerAttach, error) {
	var resource VolumeContainerAttach
	err := ctx.ReadResource("lxd:index/volumeContainerAttach:VolumeContainerAttach", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeContainerAttach resources.
type volumeContainerAttachState struct {
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	ContainerName *string `pulumi:"containerName"`
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	DeviceName *string `pulumi:"deviceName"`
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	Path *string `pulumi:"path"`
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	Pool *string `pulumi:"pool"`
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	Remote *string `pulumi:"remote"`
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	VolumeName *string `pulumi:"volumeName"`
}

type VolumeContainerAttachState struct {
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	ContainerName pulumi.StringPtrInput
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	DeviceName pulumi.StringPtrInput
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	Path pulumi.StringPtrInput
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	Pool pulumi.StringPtrInput
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	Remote pulumi.StringPtrInput
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	VolumeName pulumi.StringPtrInput
}

func (VolumeContainerAttachState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeContainerAttachState)(nil)).Elem()
}

type volumeContainerAttachArgs struct {
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	ContainerName string `pulumi:"containerName"`
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	DeviceName *string `pulumi:"deviceName"`
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	Path string `pulumi:"path"`
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	Pool string `pulumi:"pool"`
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	Remote *string `pulumi:"remote"`
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	VolumeName string `pulumi:"volumeName"`
}

// The set of arguments for constructing a VolumeContainerAttach resource.
type VolumeContainerAttachArgs struct {
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	ContainerName pulumi.StringInput
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	DeviceName pulumi.StringPtrInput
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	Path pulumi.StringInput
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	Pool pulumi.StringInput
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	Remote pulumi.StringPtrInput
	// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
	VolumeName pulumi.StringInput
}

func (VolumeContainerAttachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeContainerAttachArgs)(nil)).Elem()
}

type VolumeContainerAttachInput interface {
	pulumi.Input

	ToVolumeContainerAttachOutput() VolumeContainerAttachOutput
	ToVolumeContainerAttachOutputWithContext(ctx context.Context) VolumeContainerAttachOutput
}

func (*VolumeContainerAttach) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeContainerAttach)(nil)).Elem()
}

func (i *VolumeContainerAttach) ToVolumeContainerAttachOutput() VolumeContainerAttachOutput {
	return i.ToVolumeContainerAttachOutputWithContext(context.Background())
}

func (i *VolumeContainerAttach) ToVolumeContainerAttachOutputWithContext(ctx context.Context) VolumeContainerAttachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeContainerAttachOutput)
}

func (i *VolumeContainerAttach) ToOutput(ctx context.Context) pulumix.Output[*VolumeContainerAttach] {
	return pulumix.Output[*VolumeContainerAttach]{
		OutputState: i.ToVolumeContainerAttachOutputWithContext(ctx).OutputState,
	}
}

// VolumeContainerAttachArrayInput is an input type that accepts VolumeContainerAttachArray and VolumeContainerAttachArrayOutput values.
// You can construct a concrete instance of `VolumeContainerAttachArrayInput` via:
//
//	VolumeContainerAttachArray{ VolumeContainerAttachArgs{...} }
type VolumeContainerAttachArrayInput interface {
	pulumi.Input

	ToVolumeContainerAttachArrayOutput() VolumeContainerAttachArrayOutput
	ToVolumeContainerAttachArrayOutputWithContext(context.Context) VolumeContainerAttachArrayOutput
}

type VolumeContainerAttachArray []VolumeContainerAttachInput

func (VolumeContainerAttachArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeContainerAttach)(nil)).Elem()
}

func (i VolumeContainerAttachArray) ToVolumeContainerAttachArrayOutput() VolumeContainerAttachArrayOutput {
	return i.ToVolumeContainerAttachArrayOutputWithContext(context.Background())
}

func (i VolumeContainerAttachArray) ToVolumeContainerAttachArrayOutputWithContext(ctx context.Context) VolumeContainerAttachArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeContainerAttachArrayOutput)
}

func (i VolumeContainerAttachArray) ToOutput(ctx context.Context) pulumix.Output[[]*VolumeContainerAttach] {
	return pulumix.Output[[]*VolumeContainerAttach]{
		OutputState: i.ToVolumeContainerAttachArrayOutputWithContext(ctx).OutputState,
	}
}

// VolumeContainerAttachMapInput is an input type that accepts VolumeContainerAttachMap and VolumeContainerAttachMapOutput values.
// You can construct a concrete instance of `VolumeContainerAttachMapInput` via:
//
//	VolumeContainerAttachMap{ "key": VolumeContainerAttachArgs{...} }
type VolumeContainerAttachMapInput interface {
	pulumi.Input

	ToVolumeContainerAttachMapOutput() VolumeContainerAttachMapOutput
	ToVolumeContainerAttachMapOutputWithContext(context.Context) VolumeContainerAttachMapOutput
}

type VolumeContainerAttachMap map[string]VolumeContainerAttachInput

func (VolumeContainerAttachMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeContainerAttach)(nil)).Elem()
}

func (i VolumeContainerAttachMap) ToVolumeContainerAttachMapOutput() VolumeContainerAttachMapOutput {
	return i.ToVolumeContainerAttachMapOutputWithContext(context.Background())
}

func (i VolumeContainerAttachMap) ToVolumeContainerAttachMapOutputWithContext(ctx context.Context) VolumeContainerAttachMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeContainerAttachMapOutput)
}

func (i VolumeContainerAttachMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VolumeContainerAttach] {
	return pulumix.Output[map[string]*VolumeContainerAttach]{
		OutputState: i.ToVolumeContainerAttachMapOutputWithContext(ctx).OutputState,
	}
}

type VolumeContainerAttachOutput struct{ *pulumi.OutputState }

func (VolumeContainerAttachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeContainerAttach)(nil)).Elem()
}

func (o VolumeContainerAttachOutput) ToVolumeContainerAttachOutput() VolumeContainerAttachOutput {
	return o
}

func (o VolumeContainerAttachOutput) ToVolumeContainerAttachOutputWithContext(ctx context.Context) VolumeContainerAttachOutput {
	return o
}

func (o VolumeContainerAttachOutput) ToOutput(ctx context.Context) pulumix.Output[*VolumeContainerAttach] {
	return pulumix.Output[*VolumeContainerAttach]{
		OutputState: o.OutputState,
	}
}

// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
func (o VolumeContainerAttachOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeContainerAttach) pulumi.StringOutput { return v.ContainerName }).(pulumi.StringOutput)
}

// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
func (o VolumeContainerAttachOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeContainerAttach) pulumi.StringOutput { return v.DeviceName }).(pulumi.StringOutput)
}

// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
func (o VolumeContainerAttachOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeContainerAttach) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
func (o VolumeContainerAttachOutput) Pool() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeContainerAttach) pulumi.StringOutput { return v.Pool }).(pulumi.StringOutput)
}

// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
func (o VolumeContainerAttachOutput) Remote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeContainerAttach) pulumi.StringPtrOutput { return v.Remote }).(pulumi.StringPtrOutput)
}

// Deprecated: lxd_volume_container_attach has been deprecated and will be removed
func (o VolumeContainerAttachOutput) VolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeContainerAttach) pulumi.StringOutput { return v.VolumeName }).(pulumi.StringOutput)
}

type VolumeContainerAttachArrayOutput struct{ *pulumi.OutputState }

func (VolumeContainerAttachArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeContainerAttach)(nil)).Elem()
}

func (o VolumeContainerAttachArrayOutput) ToVolumeContainerAttachArrayOutput() VolumeContainerAttachArrayOutput {
	return o
}

func (o VolumeContainerAttachArrayOutput) ToVolumeContainerAttachArrayOutputWithContext(ctx context.Context) VolumeContainerAttachArrayOutput {
	return o
}

func (o VolumeContainerAttachArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VolumeContainerAttach] {
	return pulumix.Output[[]*VolumeContainerAttach]{
		OutputState: o.OutputState,
	}
}

func (o VolumeContainerAttachArrayOutput) Index(i pulumi.IntInput) VolumeContainerAttachOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VolumeContainerAttach {
		return vs[0].([]*VolumeContainerAttach)[vs[1].(int)]
	}).(VolumeContainerAttachOutput)
}

type VolumeContainerAttachMapOutput struct{ *pulumi.OutputState }

func (VolumeContainerAttachMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeContainerAttach)(nil)).Elem()
}

func (o VolumeContainerAttachMapOutput) ToVolumeContainerAttachMapOutput() VolumeContainerAttachMapOutput {
	return o
}

func (o VolumeContainerAttachMapOutput) ToVolumeContainerAttachMapOutputWithContext(ctx context.Context) VolumeContainerAttachMapOutput {
	return o
}

func (o VolumeContainerAttachMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VolumeContainerAttach] {
	return pulumix.Output[map[string]*VolumeContainerAttach]{
		OutputState: o.OutputState,
	}
}

func (o VolumeContainerAttachMapOutput) MapIndex(k pulumi.StringInput) VolumeContainerAttachOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VolumeContainerAttach {
		return vs[0].(map[string]*VolumeContainerAttach)[vs[1].(string)]
	}).(VolumeContainerAttachOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeContainerAttachInput)(nil)).Elem(), &VolumeContainerAttach{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeContainerAttachArrayInput)(nil)).Elem(), VolumeContainerAttachArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeContainerAttachMapInput)(nil)).Elem(), VolumeContainerAttachMap{})
	pulumi.RegisterOutputType(VolumeContainerAttachOutput{})
	pulumi.RegisterOutputType(VolumeContainerAttachArrayOutput{})
	pulumi.RegisterOutputType(VolumeContainerAttachMapOutput{})
}
