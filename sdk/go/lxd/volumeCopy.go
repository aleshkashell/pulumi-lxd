// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lxd

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-lxd/sdk/go/lxd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type VolumeCopy struct {
	pulumi.CustomResourceState

	Config         pulumi.MapOutput    `pulumi:"config"`
	ContentType    pulumi.StringOutput `pulumi:"contentType"`
	ExpandedConfig pulumi.MapOutput    `pulumi:"expandedConfig"`
	Location       pulumi.StringOutput `pulumi:"location"`
	// The name of the destination volume.
	Name pulumi.StringOutput `pulumi:"name"`
	// The destination pool.
	Pool pulumi.StringOutput `pulumi:"pool"`
	// The destination remote.
	Remote pulumi.StringPtrOutput `pulumi:"remote"`
	// The name of the source volume.
	SourceName pulumi.StringOutput `pulumi:"sourceName"`
	// The source pool.
	SourcePool pulumi.StringOutput `pulumi:"sourcePool"`
	// The remote from which the source volume is copied.
	SourceRemote pulumi.StringPtrOutput `pulumi:"sourceRemote"`
	Target       pulumi.StringPtrOutput `pulumi:"target"`
}

// NewVolumeCopy registers a new resource with the given unique name, arguments, and options.
func NewVolumeCopy(ctx *pulumi.Context,
	name string, args *VolumeCopyArgs, opts ...pulumi.ResourceOption) (*VolumeCopy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Pool == nil {
		return nil, errors.New("invalid value for required argument 'Pool'")
	}
	if args.SourceName == nil {
		return nil, errors.New("invalid value for required argument 'SourceName'")
	}
	if args.SourcePool == nil {
		return nil, errors.New("invalid value for required argument 'SourcePool'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumeCopy
	err := ctx.RegisterResource("lxd:index/volumeCopy:VolumeCopy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeCopy gets an existing VolumeCopy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeCopy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeCopyState, opts ...pulumi.ResourceOption) (*VolumeCopy, error) {
	var resource VolumeCopy
	err := ctx.ReadResource("lxd:index/volumeCopy:VolumeCopy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeCopy resources.
type volumeCopyState struct {
	Config         map[string]interface{} `pulumi:"config"`
	ContentType    *string                `pulumi:"contentType"`
	ExpandedConfig map[string]interface{} `pulumi:"expandedConfig"`
	Location       *string                `pulumi:"location"`
	// The name of the destination volume.
	Name *string `pulumi:"name"`
	// The destination pool.
	Pool *string `pulumi:"pool"`
	// The destination remote.
	Remote *string `pulumi:"remote"`
	// The name of the source volume.
	SourceName *string `pulumi:"sourceName"`
	// The source pool.
	SourcePool *string `pulumi:"sourcePool"`
	// The remote from which the source volume is copied.
	SourceRemote *string `pulumi:"sourceRemote"`
	Target       *string `pulumi:"target"`
}

type VolumeCopyState struct {
	Config         pulumi.MapInput
	ContentType    pulumi.StringPtrInput
	ExpandedConfig pulumi.MapInput
	Location       pulumi.StringPtrInput
	// The name of the destination volume.
	Name pulumi.StringPtrInput
	// The destination pool.
	Pool pulumi.StringPtrInput
	// The destination remote.
	Remote pulumi.StringPtrInput
	// The name of the source volume.
	SourceName pulumi.StringPtrInput
	// The source pool.
	SourcePool pulumi.StringPtrInput
	// The remote from which the source volume is copied.
	SourceRemote pulumi.StringPtrInput
	Target       pulumi.StringPtrInput
}

func (VolumeCopyState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeCopyState)(nil)).Elem()
}

type volumeCopyArgs struct {
	// The name of the destination volume.
	Name *string `pulumi:"name"`
	// The destination pool.
	Pool string `pulumi:"pool"`
	// The destination remote.
	Remote *string `pulumi:"remote"`
	// The name of the source volume.
	SourceName string `pulumi:"sourceName"`
	// The source pool.
	SourcePool string `pulumi:"sourcePool"`
	// The remote from which the source volume is copied.
	SourceRemote *string `pulumi:"sourceRemote"`
	Target       *string `pulumi:"target"`
}

// The set of arguments for constructing a VolumeCopy resource.
type VolumeCopyArgs struct {
	// The name of the destination volume.
	Name pulumi.StringPtrInput
	// The destination pool.
	Pool pulumi.StringInput
	// The destination remote.
	Remote pulumi.StringPtrInput
	// The name of the source volume.
	SourceName pulumi.StringInput
	// The source pool.
	SourcePool pulumi.StringInput
	// The remote from which the source volume is copied.
	SourceRemote pulumi.StringPtrInput
	Target       pulumi.StringPtrInput
}

func (VolumeCopyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeCopyArgs)(nil)).Elem()
}

type VolumeCopyInput interface {
	pulumi.Input

	ToVolumeCopyOutput() VolumeCopyOutput
	ToVolumeCopyOutputWithContext(ctx context.Context) VolumeCopyOutput
}

func (*VolumeCopy) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeCopy)(nil)).Elem()
}

func (i *VolumeCopy) ToVolumeCopyOutput() VolumeCopyOutput {
	return i.ToVolumeCopyOutputWithContext(context.Background())
}

func (i *VolumeCopy) ToVolumeCopyOutputWithContext(ctx context.Context) VolumeCopyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeCopyOutput)
}

func (i *VolumeCopy) ToOutput(ctx context.Context) pulumix.Output[*VolumeCopy] {
	return pulumix.Output[*VolumeCopy]{
		OutputState: i.ToVolumeCopyOutputWithContext(ctx).OutputState,
	}
}

// VolumeCopyArrayInput is an input type that accepts VolumeCopyArray and VolumeCopyArrayOutput values.
// You can construct a concrete instance of `VolumeCopyArrayInput` via:
//
//	VolumeCopyArray{ VolumeCopyArgs{...} }
type VolumeCopyArrayInput interface {
	pulumi.Input

	ToVolumeCopyArrayOutput() VolumeCopyArrayOutput
	ToVolumeCopyArrayOutputWithContext(context.Context) VolumeCopyArrayOutput
}

type VolumeCopyArray []VolumeCopyInput

func (VolumeCopyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeCopy)(nil)).Elem()
}

func (i VolumeCopyArray) ToVolumeCopyArrayOutput() VolumeCopyArrayOutput {
	return i.ToVolumeCopyArrayOutputWithContext(context.Background())
}

func (i VolumeCopyArray) ToVolumeCopyArrayOutputWithContext(ctx context.Context) VolumeCopyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeCopyArrayOutput)
}

func (i VolumeCopyArray) ToOutput(ctx context.Context) pulumix.Output[[]*VolumeCopy] {
	return pulumix.Output[[]*VolumeCopy]{
		OutputState: i.ToVolumeCopyArrayOutputWithContext(ctx).OutputState,
	}
}

// VolumeCopyMapInput is an input type that accepts VolumeCopyMap and VolumeCopyMapOutput values.
// You can construct a concrete instance of `VolumeCopyMapInput` via:
//
//	VolumeCopyMap{ "key": VolumeCopyArgs{...} }
type VolumeCopyMapInput interface {
	pulumi.Input

	ToVolumeCopyMapOutput() VolumeCopyMapOutput
	ToVolumeCopyMapOutputWithContext(context.Context) VolumeCopyMapOutput
}

type VolumeCopyMap map[string]VolumeCopyInput

func (VolumeCopyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeCopy)(nil)).Elem()
}

func (i VolumeCopyMap) ToVolumeCopyMapOutput() VolumeCopyMapOutput {
	return i.ToVolumeCopyMapOutputWithContext(context.Background())
}

func (i VolumeCopyMap) ToVolumeCopyMapOutputWithContext(ctx context.Context) VolumeCopyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeCopyMapOutput)
}

func (i VolumeCopyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VolumeCopy] {
	return pulumix.Output[map[string]*VolumeCopy]{
		OutputState: i.ToVolumeCopyMapOutputWithContext(ctx).OutputState,
	}
}

type VolumeCopyOutput struct{ *pulumi.OutputState }

func (VolumeCopyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeCopy)(nil)).Elem()
}

func (o VolumeCopyOutput) ToVolumeCopyOutput() VolumeCopyOutput {
	return o
}

func (o VolumeCopyOutput) ToVolumeCopyOutputWithContext(ctx context.Context) VolumeCopyOutput {
	return o
}

func (o VolumeCopyOutput) ToOutput(ctx context.Context) pulumix.Output[*VolumeCopy] {
	return pulumix.Output[*VolumeCopy]{
		OutputState: o.OutputState,
	}
}

func (o VolumeCopyOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *VolumeCopy) pulumi.MapOutput { return v.Config }).(pulumi.MapOutput)
}

func (o VolumeCopyOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeCopy) pulumi.StringOutput { return v.ContentType }).(pulumi.StringOutput)
}

func (o VolumeCopyOutput) ExpandedConfig() pulumi.MapOutput {
	return o.ApplyT(func(v *VolumeCopy) pulumi.MapOutput { return v.ExpandedConfig }).(pulumi.MapOutput)
}

func (o VolumeCopyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeCopy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the destination volume.
func (o VolumeCopyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeCopy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The destination pool.
func (o VolumeCopyOutput) Pool() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeCopy) pulumi.StringOutput { return v.Pool }).(pulumi.StringOutput)
}

// The destination remote.
func (o VolumeCopyOutput) Remote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeCopy) pulumi.StringPtrOutput { return v.Remote }).(pulumi.StringPtrOutput)
}

// The name of the source volume.
func (o VolumeCopyOutput) SourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeCopy) pulumi.StringOutput { return v.SourceName }).(pulumi.StringOutput)
}

// The source pool.
func (o VolumeCopyOutput) SourcePool() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeCopy) pulumi.StringOutput { return v.SourcePool }).(pulumi.StringOutput)
}

// The remote from which the source volume is copied.
func (o VolumeCopyOutput) SourceRemote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeCopy) pulumi.StringPtrOutput { return v.SourceRemote }).(pulumi.StringPtrOutput)
}

func (o VolumeCopyOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeCopy) pulumi.StringPtrOutput { return v.Target }).(pulumi.StringPtrOutput)
}

type VolumeCopyArrayOutput struct{ *pulumi.OutputState }

func (VolumeCopyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeCopy)(nil)).Elem()
}

func (o VolumeCopyArrayOutput) ToVolumeCopyArrayOutput() VolumeCopyArrayOutput {
	return o
}

func (o VolumeCopyArrayOutput) ToVolumeCopyArrayOutputWithContext(ctx context.Context) VolumeCopyArrayOutput {
	return o
}

func (o VolumeCopyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VolumeCopy] {
	return pulumix.Output[[]*VolumeCopy]{
		OutputState: o.OutputState,
	}
}

func (o VolumeCopyArrayOutput) Index(i pulumi.IntInput) VolumeCopyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VolumeCopy {
		return vs[0].([]*VolumeCopy)[vs[1].(int)]
	}).(VolumeCopyOutput)
}

type VolumeCopyMapOutput struct{ *pulumi.OutputState }

func (VolumeCopyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeCopy)(nil)).Elem()
}

func (o VolumeCopyMapOutput) ToVolumeCopyMapOutput() VolumeCopyMapOutput {
	return o
}

func (o VolumeCopyMapOutput) ToVolumeCopyMapOutputWithContext(ctx context.Context) VolumeCopyMapOutput {
	return o
}

func (o VolumeCopyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VolumeCopy] {
	return pulumix.Output[map[string]*VolumeCopy]{
		OutputState: o.OutputState,
	}
}

func (o VolumeCopyMapOutput) MapIndex(k pulumi.StringInput) VolumeCopyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VolumeCopy {
		return vs[0].(map[string]*VolumeCopy)[vs[1].(string)]
	}).(VolumeCopyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeCopyInput)(nil)).Elem(), &VolumeCopy{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeCopyArrayInput)(nil)).Elem(), VolumeCopyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeCopyMapInput)(nil)).Elem(), VolumeCopyMap{})
	pulumi.RegisterOutputType(VolumeCopyOutput{})
	pulumi.RegisterOutputType(VolumeCopyArrayOutput{})
	pulumi.RegisterOutputType(VolumeCopyMapOutput{})
}
