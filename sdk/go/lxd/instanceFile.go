// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lxd

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-lxd/sdk/go/lxd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type InstanceFile struct {
	pulumi.CustomResourceState

	Append            pulumi.BoolPtrOutput   `pulumi:"append"`
	Content           pulumi.StringPtrOutput `pulumi:"content"`
	CreateDirectories pulumi.BoolPtrOutput   `pulumi:"createDirectories"`
	Gid               pulumi.IntPtrOutput    `pulumi:"gid"`
	InstanceName      pulumi.StringOutput    `pulumi:"instanceName"`
	Mode              pulumi.StringPtrOutput `pulumi:"mode"`
	Project           pulumi.StringPtrOutput `pulumi:"project"`
	Remote            pulumi.StringPtrOutput `pulumi:"remote"`
	Source            pulumi.StringPtrOutput `pulumi:"source"`
	TargetFile        pulumi.StringOutput    `pulumi:"targetFile"`
	Uid               pulumi.IntPtrOutput    `pulumi:"uid"`
}

// NewInstanceFile registers a new resource with the given unique name, arguments, and options.
func NewInstanceFile(ctx *pulumi.Context,
	name string, args *InstanceFileArgs, opts ...pulumi.ResourceOption) (*InstanceFile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	if args.TargetFile == nil {
		return nil, errors.New("invalid value for required argument 'TargetFile'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InstanceFile
	err := ctx.RegisterResource("lxd:index/instanceFile:InstanceFile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceFile gets an existing InstanceFile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceFile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceFileState, opts ...pulumi.ResourceOption) (*InstanceFile, error) {
	var resource InstanceFile
	err := ctx.ReadResource("lxd:index/instanceFile:InstanceFile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceFile resources.
type instanceFileState struct {
	Append            *bool   `pulumi:"append"`
	Content           *string `pulumi:"content"`
	CreateDirectories *bool   `pulumi:"createDirectories"`
	Gid               *int    `pulumi:"gid"`
	InstanceName      *string `pulumi:"instanceName"`
	Mode              *string `pulumi:"mode"`
	Project           *string `pulumi:"project"`
	Remote            *string `pulumi:"remote"`
	Source            *string `pulumi:"source"`
	TargetFile        *string `pulumi:"targetFile"`
	Uid               *int    `pulumi:"uid"`
}

type InstanceFileState struct {
	Append            pulumi.BoolPtrInput
	Content           pulumi.StringPtrInput
	CreateDirectories pulumi.BoolPtrInput
	Gid               pulumi.IntPtrInput
	InstanceName      pulumi.StringPtrInput
	Mode              pulumi.StringPtrInput
	Project           pulumi.StringPtrInput
	Remote            pulumi.StringPtrInput
	Source            pulumi.StringPtrInput
	TargetFile        pulumi.StringPtrInput
	Uid               pulumi.IntPtrInput
}

func (InstanceFileState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceFileState)(nil)).Elem()
}

type instanceFileArgs struct {
	Append            *bool   `pulumi:"append"`
	Content           *string `pulumi:"content"`
	CreateDirectories *bool   `pulumi:"createDirectories"`
	Gid               *int    `pulumi:"gid"`
	InstanceName      string  `pulumi:"instanceName"`
	Mode              *string `pulumi:"mode"`
	Project           *string `pulumi:"project"`
	Remote            *string `pulumi:"remote"`
	Source            *string `pulumi:"source"`
	TargetFile        string  `pulumi:"targetFile"`
	Uid               *int    `pulumi:"uid"`
}

// The set of arguments for constructing a InstanceFile resource.
type InstanceFileArgs struct {
	Append            pulumi.BoolPtrInput
	Content           pulumi.StringPtrInput
	CreateDirectories pulumi.BoolPtrInput
	Gid               pulumi.IntPtrInput
	InstanceName      pulumi.StringInput
	Mode              pulumi.StringPtrInput
	Project           pulumi.StringPtrInput
	Remote            pulumi.StringPtrInput
	Source            pulumi.StringPtrInput
	TargetFile        pulumi.StringInput
	Uid               pulumi.IntPtrInput
}

func (InstanceFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceFileArgs)(nil)).Elem()
}

type InstanceFileInput interface {
	pulumi.Input

	ToInstanceFileOutput() InstanceFileOutput
	ToInstanceFileOutputWithContext(ctx context.Context) InstanceFileOutput
}

func (*InstanceFile) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFile)(nil)).Elem()
}

func (i *InstanceFile) ToInstanceFileOutput() InstanceFileOutput {
	return i.ToInstanceFileOutputWithContext(context.Background())
}

func (i *InstanceFile) ToInstanceFileOutputWithContext(ctx context.Context) InstanceFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFileOutput)
}

func (i *InstanceFile) ToOutput(ctx context.Context) pulumix.Output[*InstanceFile] {
	return pulumix.Output[*InstanceFile]{
		OutputState: i.ToInstanceFileOutputWithContext(ctx).OutputState,
	}
}

// InstanceFileArrayInput is an input type that accepts InstanceFileArray and InstanceFileArrayOutput values.
// You can construct a concrete instance of `InstanceFileArrayInput` via:
//
//	InstanceFileArray{ InstanceFileArgs{...} }
type InstanceFileArrayInput interface {
	pulumi.Input

	ToInstanceFileArrayOutput() InstanceFileArrayOutput
	ToInstanceFileArrayOutputWithContext(context.Context) InstanceFileArrayOutput
}

type InstanceFileArray []InstanceFileInput

func (InstanceFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceFile)(nil)).Elem()
}

func (i InstanceFileArray) ToInstanceFileArrayOutput() InstanceFileArrayOutput {
	return i.ToInstanceFileArrayOutputWithContext(context.Background())
}

func (i InstanceFileArray) ToInstanceFileArrayOutputWithContext(ctx context.Context) InstanceFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFileArrayOutput)
}

func (i InstanceFileArray) ToOutput(ctx context.Context) pulumix.Output[[]*InstanceFile] {
	return pulumix.Output[[]*InstanceFile]{
		OutputState: i.ToInstanceFileArrayOutputWithContext(ctx).OutputState,
	}
}

// InstanceFileMapInput is an input type that accepts InstanceFileMap and InstanceFileMapOutput values.
// You can construct a concrete instance of `InstanceFileMapInput` via:
//
//	InstanceFileMap{ "key": InstanceFileArgs{...} }
type InstanceFileMapInput interface {
	pulumi.Input

	ToInstanceFileMapOutput() InstanceFileMapOutput
	ToInstanceFileMapOutputWithContext(context.Context) InstanceFileMapOutput
}

type InstanceFileMap map[string]InstanceFileInput

func (InstanceFileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceFile)(nil)).Elem()
}

func (i InstanceFileMap) ToInstanceFileMapOutput() InstanceFileMapOutput {
	return i.ToInstanceFileMapOutputWithContext(context.Background())
}

func (i InstanceFileMap) ToInstanceFileMapOutputWithContext(ctx context.Context) InstanceFileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFileMapOutput)
}

func (i InstanceFileMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*InstanceFile] {
	return pulumix.Output[map[string]*InstanceFile]{
		OutputState: i.ToInstanceFileMapOutputWithContext(ctx).OutputState,
	}
}

type InstanceFileOutput struct{ *pulumi.OutputState }

func (InstanceFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFile)(nil)).Elem()
}

func (o InstanceFileOutput) ToInstanceFileOutput() InstanceFileOutput {
	return o
}

func (o InstanceFileOutput) ToInstanceFileOutputWithContext(ctx context.Context) InstanceFileOutput {
	return o
}

func (o InstanceFileOutput) ToOutput(ctx context.Context) pulumix.Output[*InstanceFile] {
	return pulumix.Output[*InstanceFile]{
		OutputState: o.OutputState,
	}
}

func (o InstanceFileOutput) Append() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceFile) pulumi.BoolPtrOutput { return v.Append }).(pulumi.BoolPtrOutput)
}

func (o InstanceFileOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceFile) pulumi.StringPtrOutput { return v.Content }).(pulumi.StringPtrOutput)
}

func (o InstanceFileOutput) CreateDirectories() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceFile) pulumi.BoolPtrOutput { return v.CreateDirectories }).(pulumi.BoolPtrOutput)
}

func (o InstanceFileOutput) Gid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceFile) pulumi.IntPtrOutput { return v.Gid }).(pulumi.IntPtrOutput)
}

func (o InstanceFileOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceFile) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

func (o InstanceFileOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceFile) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o InstanceFileOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceFile) pulumi.StringPtrOutput { return v.Project }).(pulumi.StringPtrOutput)
}

func (o InstanceFileOutput) Remote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceFile) pulumi.StringPtrOutput { return v.Remote }).(pulumi.StringPtrOutput)
}

func (o InstanceFileOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceFile) pulumi.StringPtrOutput { return v.Source }).(pulumi.StringPtrOutput)
}

func (o InstanceFileOutput) TargetFile() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceFile) pulumi.StringOutput { return v.TargetFile }).(pulumi.StringOutput)
}

func (o InstanceFileOutput) Uid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceFile) pulumi.IntPtrOutput { return v.Uid }).(pulumi.IntPtrOutput)
}

type InstanceFileArrayOutput struct{ *pulumi.OutputState }

func (InstanceFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceFile)(nil)).Elem()
}

func (o InstanceFileArrayOutput) ToInstanceFileArrayOutput() InstanceFileArrayOutput {
	return o
}

func (o InstanceFileArrayOutput) ToInstanceFileArrayOutputWithContext(ctx context.Context) InstanceFileArrayOutput {
	return o
}

func (o InstanceFileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*InstanceFile] {
	return pulumix.Output[[]*InstanceFile]{
		OutputState: o.OutputState,
	}
}

func (o InstanceFileArrayOutput) Index(i pulumi.IntInput) InstanceFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceFile {
		return vs[0].([]*InstanceFile)[vs[1].(int)]
	}).(InstanceFileOutput)
}

type InstanceFileMapOutput struct{ *pulumi.OutputState }

func (InstanceFileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceFile)(nil)).Elem()
}

func (o InstanceFileMapOutput) ToInstanceFileMapOutput() InstanceFileMapOutput {
	return o
}

func (o InstanceFileMapOutput) ToInstanceFileMapOutputWithContext(ctx context.Context) InstanceFileMapOutput {
	return o
}

func (o InstanceFileMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*InstanceFile] {
	return pulumix.Output[map[string]*InstanceFile]{
		OutputState: o.OutputState,
	}
}

func (o InstanceFileMapOutput) MapIndex(k pulumi.StringInput) InstanceFileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceFile {
		return vs[0].(map[string]*InstanceFile)[vs[1].(string)]
	}).(InstanceFileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFileInput)(nil)).Elem(), &InstanceFile{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFileArrayInput)(nil)).Elem(), InstanceFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFileMapInput)(nil)).Elem(), InstanceFileMap{})
	pulumi.RegisterOutputType(InstanceFileOutput{})
	pulumi.RegisterOutputType(InstanceFileArrayOutput{})
	pulumi.RegisterOutputType(InstanceFileMapOutput{})
}
