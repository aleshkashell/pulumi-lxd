// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lxd

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-lxd/sdk/go/lxd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ContainerDevice struct {
	Name       string                 `pulumi:"name"`
	Properties map[string]interface{} `pulumi:"properties"`
	Type       string                 `pulumi:"type"`
}

// ContainerDeviceInput is an input type that accepts ContainerDeviceArgs and ContainerDeviceOutput values.
// You can construct a concrete instance of `ContainerDeviceInput` via:
//
//	ContainerDeviceArgs{...}
type ContainerDeviceInput interface {
	pulumi.Input

	ToContainerDeviceOutput() ContainerDeviceOutput
	ToContainerDeviceOutputWithContext(context.Context) ContainerDeviceOutput
}

type ContainerDeviceArgs struct {
	Name       pulumi.StringInput `pulumi:"name"`
	Properties pulumi.MapInput    `pulumi:"properties"`
	Type       pulumi.StringInput `pulumi:"type"`
}

func (ContainerDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerDevice)(nil)).Elem()
}

func (i ContainerDeviceArgs) ToContainerDeviceOutput() ContainerDeviceOutput {
	return i.ToContainerDeviceOutputWithContext(context.Background())
}

func (i ContainerDeviceArgs) ToContainerDeviceOutputWithContext(ctx context.Context) ContainerDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerDeviceOutput)
}

func (i ContainerDeviceArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerDevice] {
	return pulumix.Output[ContainerDevice]{
		OutputState: i.ToContainerDeviceOutputWithContext(ctx).OutputState,
	}
}

// ContainerDeviceArrayInput is an input type that accepts ContainerDeviceArray and ContainerDeviceArrayOutput values.
// You can construct a concrete instance of `ContainerDeviceArrayInput` via:
//
//	ContainerDeviceArray{ ContainerDeviceArgs{...} }
type ContainerDeviceArrayInput interface {
	pulumi.Input

	ToContainerDeviceArrayOutput() ContainerDeviceArrayOutput
	ToContainerDeviceArrayOutputWithContext(context.Context) ContainerDeviceArrayOutput
}

type ContainerDeviceArray []ContainerDeviceInput

func (ContainerDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerDevice)(nil)).Elem()
}

func (i ContainerDeviceArray) ToContainerDeviceArrayOutput() ContainerDeviceArrayOutput {
	return i.ToContainerDeviceArrayOutputWithContext(context.Background())
}

func (i ContainerDeviceArray) ToContainerDeviceArrayOutputWithContext(ctx context.Context) ContainerDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerDeviceArrayOutput)
}

func (i ContainerDeviceArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerDevice] {
	return pulumix.Output[[]ContainerDevice]{
		OutputState: i.ToContainerDeviceArrayOutputWithContext(ctx).OutputState,
	}
}

type ContainerDeviceOutput struct{ *pulumi.OutputState }

func (ContainerDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerDevice)(nil)).Elem()
}

func (o ContainerDeviceOutput) ToContainerDeviceOutput() ContainerDeviceOutput {
	return o
}

func (o ContainerDeviceOutput) ToContainerDeviceOutputWithContext(ctx context.Context) ContainerDeviceOutput {
	return o
}

func (o ContainerDeviceOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerDevice] {
	return pulumix.Output[ContainerDevice]{
		OutputState: o.OutputState,
	}
}

func (o ContainerDeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerDevice) string { return v.Name }).(pulumi.StringOutput)
}

func (o ContainerDeviceOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v ContainerDevice) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

func (o ContainerDeviceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerDevice) string { return v.Type }).(pulumi.StringOutput)
}

type ContainerDeviceArrayOutput struct{ *pulumi.OutputState }

func (ContainerDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerDevice)(nil)).Elem()
}

func (o ContainerDeviceArrayOutput) ToContainerDeviceArrayOutput() ContainerDeviceArrayOutput {
	return o
}

func (o ContainerDeviceArrayOutput) ToContainerDeviceArrayOutputWithContext(ctx context.Context) ContainerDeviceArrayOutput {
	return o
}

func (o ContainerDeviceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerDevice] {
	return pulumix.Output[[]ContainerDevice]{
		OutputState: o.OutputState,
	}
}

func (o ContainerDeviceArrayOutput) Index(i pulumi.IntInput) ContainerDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerDevice {
		return vs[0].([]ContainerDevice)[vs[1].(int)]
	}).(ContainerDeviceOutput)
}

type ContainerFileType struct {
	Content           *string `pulumi:"content"`
	CreateDirectories *bool   `pulumi:"createDirectories"`
	Gid               *int    `pulumi:"gid"`
	Mode              *string `pulumi:"mode"`
	Source            *string `pulumi:"source"`
	TargetFile        string  `pulumi:"targetFile"`
	Uid               *int    `pulumi:"uid"`
}

// ContainerFileTypeInput is an input type that accepts ContainerFileTypeArgs and ContainerFileTypeOutput values.
// You can construct a concrete instance of `ContainerFileTypeInput` via:
//
//	ContainerFileTypeArgs{...}
type ContainerFileTypeInput interface {
	pulumi.Input

	ToContainerFileTypeOutput() ContainerFileTypeOutput
	ToContainerFileTypeOutputWithContext(context.Context) ContainerFileTypeOutput
}

type ContainerFileTypeArgs struct {
	Content           pulumi.StringPtrInput `pulumi:"content"`
	CreateDirectories pulumi.BoolPtrInput   `pulumi:"createDirectories"`
	Gid               pulumi.IntPtrInput    `pulumi:"gid"`
	Mode              pulumi.StringPtrInput `pulumi:"mode"`
	Source            pulumi.StringPtrInput `pulumi:"source"`
	TargetFile        pulumi.StringInput    `pulumi:"targetFile"`
	Uid               pulumi.IntPtrInput    `pulumi:"uid"`
}

func (ContainerFileTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerFileType)(nil)).Elem()
}

func (i ContainerFileTypeArgs) ToContainerFileTypeOutput() ContainerFileTypeOutput {
	return i.ToContainerFileTypeOutputWithContext(context.Background())
}

func (i ContainerFileTypeArgs) ToContainerFileTypeOutputWithContext(ctx context.Context) ContainerFileTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerFileTypeOutput)
}

func (i ContainerFileTypeArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerFileType] {
	return pulumix.Output[ContainerFileType]{
		OutputState: i.ToContainerFileTypeOutputWithContext(ctx).OutputState,
	}
}

// ContainerFileTypeArrayInput is an input type that accepts ContainerFileTypeArray and ContainerFileTypeArrayOutput values.
// You can construct a concrete instance of `ContainerFileTypeArrayInput` via:
//
//	ContainerFileTypeArray{ ContainerFileTypeArgs{...} }
type ContainerFileTypeArrayInput interface {
	pulumi.Input

	ToContainerFileTypeArrayOutput() ContainerFileTypeArrayOutput
	ToContainerFileTypeArrayOutputWithContext(context.Context) ContainerFileTypeArrayOutput
}

type ContainerFileTypeArray []ContainerFileTypeInput

func (ContainerFileTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerFileType)(nil)).Elem()
}

func (i ContainerFileTypeArray) ToContainerFileTypeArrayOutput() ContainerFileTypeArrayOutput {
	return i.ToContainerFileTypeArrayOutputWithContext(context.Background())
}

func (i ContainerFileTypeArray) ToContainerFileTypeArrayOutputWithContext(ctx context.Context) ContainerFileTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerFileTypeArrayOutput)
}

func (i ContainerFileTypeArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerFileType] {
	return pulumix.Output[[]ContainerFileType]{
		OutputState: i.ToContainerFileTypeArrayOutputWithContext(ctx).OutputState,
	}
}

type ContainerFileTypeOutput struct{ *pulumi.OutputState }

func (ContainerFileTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerFileType)(nil)).Elem()
}

func (o ContainerFileTypeOutput) ToContainerFileTypeOutput() ContainerFileTypeOutput {
	return o
}

func (o ContainerFileTypeOutput) ToContainerFileTypeOutputWithContext(ctx context.Context) ContainerFileTypeOutput {
	return o
}

func (o ContainerFileTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerFileType] {
	return pulumix.Output[ContainerFileType]{
		OutputState: o.OutputState,
	}
}

func (o ContainerFileTypeOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerFileType) *string { return v.Content }).(pulumi.StringPtrOutput)
}

func (o ContainerFileTypeOutput) CreateDirectories() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerFileType) *bool { return v.CreateDirectories }).(pulumi.BoolPtrOutput)
}

func (o ContainerFileTypeOutput) Gid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerFileType) *int { return v.Gid }).(pulumi.IntPtrOutput)
}

func (o ContainerFileTypeOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerFileType) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o ContainerFileTypeOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerFileType) *string { return v.Source }).(pulumi.StringPtrOutput)
}

func (o ContainerFileTypeOutput) TargetFile() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerFileType) string { return v.TargetFile }).(pulumi.StringOutput)
}

func (o ContainerFileTypeOutput) Uid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerFileType) *int { return v.Uid }).(pulumi.IntPtrOutput)
}

type ContainerFileTypeArrayOutput struct{ *pulumi.OutputState }

func (ContainerFileTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerFileType)(nil)).Elem()
}

func (o ContainerFileTypeArrayOutput) ToContainerFileTypeArrayOutput() ContainerFileTypeArrayOutput {
	return o
}

func (o ContainerFileTypeArrayOutput) ToContainerFileTypeArrayOutputWithContext(ctx context.Context) ContainerFileTypeArrayOutput {
	return o
}

func (o ContainerFileTypeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerFileType] {
	return pulumix.Output[[]ContainerFileType]{
		OutputState: o.OutputState,
	}
}

func (o ContainerFileTypeArrayOutput) Index(i pulumi.IntInput) ContainerFileTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerFileType {
		return vs[0].([]ContainerFileType)[vs[1].(int)]
	}).(ContainerFileTypeOutput)
}

type InstanceDevice struct {
	Name       string                 `pulumi:"name"`
	Properties map[string]interface{} `pulumi:"properties"`
	Type       string                 `pulumi:"type"`
}

// InstanceDeviceInput is an input type that accepts InstanceDeviceArgs and InstanceDeviceOutput values.
// You can construct a concrete instance of `InstanceDeviceInput` via:
//
//	InstanceDeviceArgs{...}
type InstanceDeviceInput interface {
	pulumi.Input

	ToInstanceDeviceOutput() InstanceDeviceOutput
	ToInstanceDeviceOutputWithContext(context.Context) InstanceDeviceOutput
}

type InstanceDeviceArgs struct {
	Name       pulumi.StringInput `pulumi:"name"`
	Properties pulumi.MapInput    `pulumi:"properties"`
	Type       pulumi.StringInput `pulumi:"type"`
}

func (InstanceDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDevice)(nil)).Elem()
}

func (i InstanceDeviceArgs) ToInstanceDeviceOutput() InstanceDeviceOutput {
	return i.ToInstanceDeviceOutputWithContext(context.Background())
}

func (i InstanceDeviceArgs) ToInstanceDeviceOutputWithContext(ctx context.Context) InstanceDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDeviceOutput)
}

func (i InstanceDeviceArgs) ToOutput(ctx context.Context) pulumix.Output[InstanceDevice] {
	return pulumix.Output[InstanceDevice]{
		OutputState: i.ToInstanceDeviceOutputWithContext(ctx).OutputState,
	}
}

// InstanceDeviceArrayInput is an input type that accepts InstanceDeviceArray and InstanceDeviceArrayOutput values.
// You can construct a concrete instance of `InstanceDeviceArrayInput` via:
//
//	InstanceDeviceArray{ InstanceDeviceArgs{...} }
type InstanceDeviceArrayInput interface {
	pulumi.Input

	ToInstanceDeviceArrayOutput() InstanceDeviceArrayOutput
	ToInstanceDeviceArrayOutputWithContext(context.Context) InstanceDeviceArrayOutput
}

type InstanceDeviceArray []InstanceDeviceInput

func (InstanceDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceDevice)(nil)).Elem()
}

func (i InstanceDeviceArray) ToInstanceDeviceArrayOutput() InstanceDeviceArrayOutput {
	return i.ToInstanceDeviceArrayOutputWithContext(context.Background())
}

func (i InstanceDeviceArray) ToInstanceDeviceArrayOutputWithContext(ctx context.Context) InstanceDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDeviceArrayOutput)
}

func (i InstanceDeviceArray) ToOutput(ctx context.Context) pulumix.Output[[]InstanceDevice] {
	return pulumix.Output[[]InstanceDevice]{
		OutputState: i.ToInstanceDeviceArrayOutputWithContext(ctx).OutputState,
	}
}

type InstanceDeviceOutput struct{ *pulumi.OutputState }

func (InstanceDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDevice)(nil)).Elem()
}

func (o InstanceDeviceOutput) ToInstanceDeviceOutput() InstanceDeviceOutput {
	return o
}

func (o InstanceDeviceOutput) ToInstanceDeviceOutputWithContext(ctx context.Context) InstanceDeviceOutput {
	return o
}

func (o InstanceDeviceOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceDevice] {
	return pulumix.Output[InstanceDevice]{
		OutputState: o.OutputState,
	}
}

func (o InstanceDeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceDevice) string { return v.Name }).(pulumi.StringOutput)
}

func (o InstanceDeviceOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v InstanceDevice) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

func (o InstanceDeviceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceDevice) string { return v.Type }).(pulumi.StringOutput)
}

type InstanceDeviceArrayOutput struct{ *pulumi.OutputState }

func (InstanceDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceDevice)(nil)).Elem()
}

func (o InstanceDeviceArrayOutput) ToInstanceDeviceArrayOutput() InstanceDeviceArrayOutput {
	return o
}

func (o InstanceDeviceArrayOutput) ToInstanceDeviceArrayOutputWithContext(ctx context.Context) InstanceDeviceArrayOutput {
	return o
}

func (o InstanceDeviceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InstanceDevice] {
	return pulumix.Output[[]InstanceDevice]{
		OutputState: o.OutputState,
	}
}

func (o InstanceDeviceArrayOutput) Index(i pulumi.IntInput) InstanceDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceDevice {
		return vs[0].([]InstanceDevice)[vs[1].(int)]
	}).(InstanceDeviceOutput)
}

type InstanceFileType struct {
	Content           *string `pulumi:"content"`
	CreateDirectories *bool   `pulumi:"createDirectories"`
	Gid               *int    `pulumi:"gid"`
	Mode              *string `pulumi:"mode"`
	Source            *string `pulumi:"source"`
	TargetFile        string  `pulumi:"targetFile"`
	Uid               *int    `pulumi:"uid"`
}

// InstanceFileTypeInput is an input type that accepts InstanceFileTypeArgs and InstanceFileTypeOutput values.
// You can construct a concrete instance of `InstanceFileTypeInput` via:
//
//	InstanceFileTypeArgs{...}
type InstanceFileTypeInput interface {
	pulumi.Input

	ToInstanceFileTypeOutput() InstanceFileTypeOutput
	ToInstanceFileTypeOutputWithContext(context.Context) InstanceFileTypeOutput
}

type InstanceFileTypeArgs struct {
	Content           pulumi.StringPtrInput `pulumi:"content"`
	CreateDirectories pulumi.BoolPtrInput   `pulumi:"createDirectories"`
	Gid               pulumi.IntPtrInput    `pulumi:"gid"`
	Mode              pulumi.StringPtrInput `pulumi:"mode"`
	Source            pulumi.StringPtrInput `pulumi:"source"`
	TargetFile        pulumi.StringInput    `pulumi:"targetFile"`
	Uid               pulumi.IntPtrInput    `pulumi:"uid"`
}

func (InstanceFileTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFileType)(nil)).Elem()
}

func (i InstanceFileTypeArgs) ToInstanceFileTypeOutput() InstanceFileTypeOutput {
	return i.ToInstanceFileTypeOutputWithContext(context.Background())
}

func (i InstanceFileTypeArgs) ToInstanceFileTypeOutputWithContext(ctx context.Context) InstanceFileTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFileTypeOutput)
}

func (i InstanceFileTypeArgs) ToOutput(ctx context.Context) pulumix.Output[InstanceFileType] {
	return pulumix.Output[InstanceFileType]{
		OutputState: i.ToInstanceFileTypeOutputWithContext(ctx).OutputState,
	}
}

// InstanceFileTypeArrayInput is an input type that accepts InstanceFileTypeArray and InstanceFileTypeArrayOutput values.
// You can construct a concrete instance of `InstanceFileTypeArrayInput` via:
//
//	InstanceFileTypeArray{ InstanceFileTypeArgs{...} }
type InstanceFileTypeArrayInput interface {
	pulumi.Input

	ToInstanceFileTypeArrayOutput() InstanceFileTypeArrayOutput
	ToInstanceFileTypeArrayOutputWithContext(context.Context) InstanceFileTypeArrayOutput
}

type InstanceFileTypeArray []InstanceFileTypeInput

func (InstanceFileTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFileType)(nil)).Elem()
}

func (i InstanceFileTypeArray) ToInstanceFileTypeArrayOutput() InstanceFileTypeArrayOutput {
	return i.ToInstanceFileTypeArrayOutputWithContext(context.Background())
}

func (i InstanceFileTypeArray) ToInstanceFileTypeArrayOutputWithContext(ctx context.Context) InstanceFileTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFileTypeArrayOutput)
}

func (i InstanceFileTypeArray) ToOutput(ctx context.Context) pulumix.Output[[]InstanceFileType] {
	return pulumix.Output[[]InstanceFileType]{
		OutputState: i.ToInstanceFileTypeArrayOutputWithContext(ctx).OutputState,
	}
}

type InstanceFileTypeOutput struct{ *pulumi.OutputState }

func (InstanceFileTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFileType)(nil)).Elem()
}

func (o InstanceFileTypeOutput) ToInstanceFileTypeOutput() InstanceFileTypeOutput {
	return o
}

func (o InstanceFileTypeOutput) ToInstanceFileTypeOutputWithContext(ctx context.Context) InstanceFileTypeOutput {
	return o
}

func (o InstanceFileTypeOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceFileType] {
	return pulumix.Output[InstanceFileType]{
		OutputState: o.OutputState,
	}
}

func (o InstanceFileTypeOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFileType) *string { return v.Content }).(pulumi.StringPtrOutput)
}

func (o InstanceFileTypeOutput) CreateDirectories() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceFileType) *bool { return v.CreateDirectories }).(pulumi.BoolPtrOutput)
}

func (o InstanceFileTypeOutput) Gid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceFileType) *int { return v.Gid }).(pulumi.IntPtrOutput)
}

func (o InstanceFileTypeOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFileType) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o InstanceFileTypeOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFileType) *string { return v.Source }).(pulumi.StringPtrOutput)
}

func (o InstanceFileTypeOutput) TargetFile() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceFileType) string { return v.TargetFile }).(pulumi.StringOutput)
}

func (o InstanceFileTypeOutput) Uid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceFileType) *int { return v.Uid }).(pulumi.IntPtrOutput)
}

type InstanceFileTypeArrayOutput struct{ *pulumi.OutputState }

func (InstanceFileTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFileType)(nil)).Elem()
}

func (o InstanceFileTypeArrayOutput) ToInstanceFileTypeArrayOutput() InstanceFileTypeArrayOutput {
	return o
}

func (o InstanceFileTypeArrayOutput) ToInstanceFileTypeArrayOutputWithContext(ctx context.Context) InstanceFileTypeArrayOutput {
	return o
}

func (o InstanceFileTypeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InstanceFileType] {
	return pulumix.Output[[]InstanceFileType]{
		OutputState: o.OutputState,
	}
}

func (o InstanceFileTypeArrayOutput) Index(i pulumi.IntInput) InstanceFileTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceFileType {
		return vs[0].([]InstanceFileType)[vs[1].(int)]
	}).(InstanceFileTypeOutput)
}

type ProfileDevice struct {
	Name       string                 `pulumi:"name"`
	Properties map[string]interface{} `pulumi:"properties"`
	Type       string                 `pulumi:"type"`
}

// ProfileDeviceInput is an input type that accepts ProfileDeviceArgs and ProfileDeviceOutput values.
// You can construct a concrete instance of `ProfileDeviceInput` via:
//
//	ProfileDeviceArgs{...}
type ProfileDeviceInput interface {
	pulumi.Input

	ToProfileDeviceOutput() ProfileDeviceOutput
	ToProfileDeviceOutputWithContext(context.Context) ProfileDeviceOutput
}

type ProfileDeviceArgs struct {
	Name       pulumi.StringInput `pulumi:"name"`
	Properties pulumi.MapInput    `pulumi:"properties"`
	Type       pulumi.StringInput `pulumi:"type"`
}

func (ProfileDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileDevice)(nil)).Elem()
}

func (i ProfileDeviceArgs) ToProfileDeviceOutput() ProfileDeviceOutput {
	return i.ToProfileDeviceOutputWithContext(context.Background())
}

func (i ProfileDeviceArgs) ToProfileDeviceOutputWithContext(ctx context.Context) ProfileDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileDeviceOutput)
}

func (i ProfileDeviceArgs) ToOutput(ctx context.Context) pulumix.Output[ProfileDevice] {
	return pulumix.Output[ProfileDevice]{
		OutputState: i.ToProfileDeviceOutputWithContext(ctx).OutputState,
	}
}

// ProfileDeviceArrayInput is an input type that accepts ProfileDeviceArray and ProfileDeviceArrayOutput values.
// You can construct a concrete instance of `ProfileDeviceArrayInput` via:
//
//	ProfileDeviceArray{ ProfileDeviceArgs{...} }
type ProfileDeviceArrayInput interface {
	pulumi.Input

	ToProfileDeviceArrayOutput() ProfileDeviceArrayOutput
	ToProfileDeviceArrayOutputWithContext(context.Context) ProfileDeviceArrayOutput
}

type ProfileDeviceArray []ProfileDeviceInput

func (ProfileDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileDevice)(nil)).Elem()
}

func (i ProfileDeviceArray) ToProfileDeviceArrayOutput() ProfileDeviceArrayOutput {
	return i.ToProfileDeviceArrayOutputWithContext(context.Background())
}

func (i ProfileDeviceArray) ToProfileDeviceArrayOutputWithContext(ctx context.Context) ProfileDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileDeviceArrayOutput)
}

func (i ProfileDeviceArray) ToOutput(ctx context.Context) pulumix.Output[[]ProfileDevice] {
	return pulumix.Output[[]ProfileDevice]{
		OutputState: i.ToProfileDeviceArrayOutputWithContext(ctx).OutputState,
	}
}

type ProfileDeviceOutput struct{ *pulumi.OutputState }

func (ProfileDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileDevice)(nil)).Elem()
}

func (o ProfileDeviceOutput) ToProfileDeviceOutput() ProfileDeviceOutput {
	return o
}

func (o ProfileDeviceOutput) ToProfileDeviceOutputWithContext(ctx context.Context) ProfileDeviceOutput {
	return o
}

func (o ProfileDeviceOutput) ToOutput(ctx context.Context) pulumix.Output[ProfileDevice] {
	return pulumix.Output[ProfileDevice]{
		OutputState: o.OutputState,
	}
}

func (o ProfileDeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProfileDevice) string { return v.Name }).(pulumi.StringOutput)
}

func (o ProfileDeviceOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v ProfileDevice) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

func (o ProfileDeviceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProfileDevice) string { return v.Type }).(pulumi.StringOutput)
}

type ProfileDeviceArrayOutput struct{ *pulumi.OutputState }

func (ProfileDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileDevice)(nil)).Elem()
}

func (o ProfileDeviceArrayOutput) ToProfileDeviceArrayOutput() ProfileDeviceArrayOutput {
	return o
}

func (o ProfileDeviceArrayOutput) ToProfileDeviceArrayOutputWithContext(ctx context.Context) ProfileDeviceArrayOutput {
	return o
}

func (o ProfileDeviceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProfileDevice] {
	return pulumix.Output[[]ProfileDevice]{
		OutputState: o.OutputState,
	}
}

func (o ProfileDeviceArrayOutput) Index(i pulumi.IntInput) ProfileDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileDevice {
		return vs[0].([]ProfileDevice)[vs[1].(int)]
	}).(ProfileDeviceOutput)
}

type ProviderLxdRemote struct {
	Address  *string `pulumi:"address"`
	Default  *bool   `pulumi:"default"`
	Name     string  `pulumi:"name"`
	Password *string `pulumi:"password"`
	Port     *string `pulumi:"port"`
	Scheme   *string `pulumi:"scheme"`
}

// ProviderLxdRemoteInput is an input type that accepts ProviderLxdRemoteArgs and ProviderLxdRemoteOutput values.
// You can construct a concrete instance of `ProviderLxdRemoteInput` via:
//
//	ProviderLxdRemoteArgs{...}
type ProviderLxdRemoteInput interface {
	pulumi.Input

	ToProviderLxdRemoteOutput() ProviderLxdRemoteOutput
	ToProviderLxdRemoteOutputWithContext(context.Context) ProviderLxdRemoteOutput
}

type ProviderLxdRemoteArgs struct {
	Address  pulumi.StringPtrInput `pulumi:"address"`
	Default  pulumi.BoolPtrInput   `pulumi:"default"`
	Name     pulumi.StringInput    `pulumi:"name"`
	Password pulumi.StringPtrInput `pulumi:"password"`
	Port     pulumi.StringPtrInput `pulumi:"port"`
	Scheme   pulumi.StringPtrInput `pulumi:"scheme"`
}

func (ProviderLxdRemoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderLxdRemote)(nil)).Elem()
}

func (i ProviderLxdRemoteArgs) ToProviderLxdRemoteOutput() ProviderLxdRemoteOutput {
	return i.ToProviderLxdRemoteOutputWithContext(context.Background())
}

func (i ProviderLxdRemoteArgs) ToProviderLxdRemoteOutputWithContext(ctx context.Context) ProviderLxdRemoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderLxdRemoteOutput)
}

func (i ProviderLxdRemoteArgs) ToOutput(ctx context.Context) pulumix.Output[ProviderLxdRemote] {
	return pulumix.Output[ProviderLxdRemote]{
		OutputState: i.ToProviderLxdRemoteOutputWithContext(ctx).OutputState,
	}
}

// ProviderLxdRemoteArrayInput is an input type that accepts ProviderLxdRemoteArray and ProviderLxdRemoteArrayOutput values.
// You can construct a concrete instance of `ProviderLxdRemoteArrayInput` via:
//
//	ProviderLxdRemoteArray{ ProviderLxdRemoteArgs{...} }
type ProviderLxdRemoteArrayInput interface {
	pulumi.Input

	ToProviderLxdRemoteArrayOutput() ProviderLxdRemoteArrayOutput
	ToProviderLxdRemoteArrayOutputWithContext(context.Context) ProviderLxdRemoteArrayOutput
}

type ProviderLxdRemoteArray []ProviderLxdRemoteInput

func (ProviderLxdRemoteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderLxdRemote)(nil)).Elem()
}

func (i ProviderLxdRemoteArray) ToProviderLxdRemoteArrayOutput() ProviderLxdRemoteArrayOutput {
	return i.ToProviderLxdRemoteArrayOutputWithContext(context.Background())
}

func (i ProviderLxdRemoteArray) ToProviderLxdRemoteArrayOutputWithContext(ctx context.Context) ProviderLxdRemoteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderLxdRemoteArrayOutput)
}

func (i ProviderLxdRemoteArray) ToOutput(ctx context.Context) pulumix.Output[[]ProviderLxdRemote] {
	return pulumix.Output[[]ProviderLxdRemote]{
		OutputState: i.ToProviderLxdRemoteArrayOutputWithContext(ctx).OutputState,
	}
}

type ProviderLxdRemoteOutput struct{ *pulumi.OutputState }

func (ProviderLxdRemoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderLxdRemote)(nil)).Elem()
}

func (o ProviderLxdRemoteOutput) ToProviderLxdRemoteOutput() ProviderLxdRemoteOutput {
	return o
}

func (o ProviderLxdRemoteOutput) ToProviderLxdRemoteOutputWithContext(ctx context.Context) ProviderLxdRemoteOutput {
	return o
}

func (o ProviderLxdRemoteOutput) ToOutput(ctx context.Context) pulumix.Output[ProviderLxdRemote] {
	return pulumix.Output[ProviderLxdRemote]{
		OutputState: o.OutputState,
	}
}

func (o ProviderLxdRemoteOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderLxdRemote) *string { return v.Address }).(pulumi.StringPtrOutput)
}

func (o ProviderLxdRemoteOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderLxdRemote) *bool { return v.Default }).(pulumi.BoolPtrOutput)
}

func (o ProviderLxdRemoteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderLxdRemote) string { return v.Name }).(pulumi.StringOutput)
}

func (o ProviderLxdRemoteOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderLxdRemote) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o ProviderLxdRemoteOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderLxdRemote) *string { return v.Port }).(pulumi.StringPtrOutput)
}

func (o ProviderLxdRemoteOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderLxdRemote) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type ProviderLxdRemoteArrayOutput struct{ *pulumi.OutputState }

func (ProviderLxdRemoteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderLxdRemote)(nil)).Elem()
}

func (o ProviderLxdRemoteArrayOutput) ToProviderLxdRemoteArrayOutput() ProviderLxdRemoteArrayOutput {
	return o
}

func (o ProviderLxdRemoteArrayOutput) ToProviderLxdRemoteArrayOutputWithContext(ctx context.Context) ProviderLxdRemoteArrayOutput {
	return o
}

func (o ProviderLxdRemoteArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProviderLxdRemote] {
	return pulumix.Output[[]ProviderLxdRemote]{
		OutputState: o.OutputState,
	}
}

func (o ProviderLxdRemoteArrayOutput) Index(i pulumi.IntInput) ProviderLxdRemoteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderLxdRemote {
		return vs[0].([]ProviderLxdRemote)[vs[1].(int)]
	}).(ProviderLxdRemoteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerDeviceInput)(nil)).Elem(), ContainerDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerDeviceArrayInput)(nil)).Elem(), ContainerDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerFileTypeInput)(nil)).Elem(), ContainerFileTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerFileTypeArrayInput)(nil)).Elem(), ContainerFileTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDeviceInput)(nil)).Elem(), InstanceDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDeviceArrayInput)(nil)).Elem(), InstanceDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFileTypeInput)(nil)).Elem(), InstanceFileTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFileTypeArrayInput)(nil)).Elem(), InstanceFileTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileDeviceInput)(nil)).Elem(), ProfileDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileDeviceArrayInput)(nil)).Elem(), ProfileDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderLxdRemoteInput)(nil)).Elem(), ProviderLxdRemoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderLxdRemoteArrayInput)(nil)).Elem(), ProviderLxdRemoteArray{})
	pulumi.RegisterOutputType(ContainerDeviceOutput{})
	pulumi.RegisterOutputType(ContainerDeviceArrayOutput{})
	pulumi.RegisterOutputType(ContainerFileTypeOutput{})
	pulumi.RegisterOutputType(ContainerFileTypeArrayOutput{})
	pulumi.RegisterOutputType(InstanceDeviceOutput{})
	pulumi.RegisterOutputType(InstanceDeviceArrayOutput{})
	pulumi.RegisterOutputType(InstanceFileTypeOutput{})
	pulumi.RegisterOutputType(InstanceFileTypeArrayOutput{})
	pulumi.RegisterOutputType(ProfileDeviceOutput{})
	pulumi.RegisterOutputType(ProfileDeviceArrayOutput{})
	pulumi.RegisterOutputType(ProviderLxdRemoteOutput{})
	pulumi.RegisterOutputType(ProviderLxdRemoteArrayOutput{})
}
