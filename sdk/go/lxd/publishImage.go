// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lxd

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-lxd/sdk/go/lxd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type PublishImage struct {
	pulumi.CustomResourceState

	Aliases              pulumi.StringArrayOutput `pulumi:"aliases"`
	Architecture         pulumi.StringOutput      `pulumi:"architecture"`
	CompressionAlgorithm pulumi.StringPtrOutput   `pulumi:"compressionAlgorithm"`
	Container            pulumi.StringOutput      `pulumi:"container"`
	CreatedAt            pulumi.IntOutput         `pulumi:"createdAt"`
	Filename             pulumi.StringPtrOutput   `pulumi:"filename"`
	Fingerprint          pulumi.StringOutput      `pulumi:"fingerprint"`
	Project              pulumi.StringPtrOutput   `pulumi:"project"`
	Properties           pulumi.MapOutput         `pulumi:"properties"`
	Public               pulumi.BoolPtrOutput     `pulumi:"public"`
	// A map of arbitrary strings that, when changed, will force the resource to be replaced.
	Triggers pulumi.MapOutput `pulumi:"triggers"`
}

// NewPublishImage registers a new resource with the given unique name, arguments, and options.
func NewPublishImage(ctx *pulumi.Context,
	name string, args *PublishImageArgs, opts ...pulumi.ResourceOption) (*PublishImage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Container == nil {
		return nil, errors.New("invalid value for required argument 'Container'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PublishImage
	err := ctx.RegisterResource("lxd:index/publishImage:PublishImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublishImage gets an existing PublishImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublishImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublishImageState, opts ...pulumi.ResourceOption) (*PublishImage, error) {
	var resource PublishImage
	err := ctx.ReadResource("lxd:index/publishImage:PublishImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublishImage resources.
type publishImageState struct {
	Aliases              []string               `pulumi:"aliases"`
	Architecture         *string                `pulumi:"architecture"`
	CompressionAlgorithm *string                `pulumi:"compressionAlgorithm"`
	Container            *string                `pulumi:"container"`
	CreatedAt            *int                   `pulumi:"createdAt"`
	Filename             *string                `pulumi:"filename"`
	Fingerprint          *string                `pulumi:"fingerprint"`
	Project              *string                `pulumi:"project"`
	Properties           map[string]interface{} `pulumi:"properties"`
	Public               *bool                  `pulumi:"public"`
	// A map of arbitrary strings that, when changed, will force the resource to be replaced.
	Triggers map[string]interface{} `pulumi:"triggers"`
}

type PublishImageState struct {
	Aliases              pulumi.StringArrayInput
	Architecture         pulumi.StringPtrInput
	CompressionAlgorithm pulumi.StringPtrInput
	Container            pulumi.StringPtrInput
	CreatedAt            pulumi.IntPtrInput
	Filename             pulumi.StringPtrInput
	Fingerprint          pulumi.StringPtrInput
	Project              pulumi.StringPtrInput
	Properties           pulumi.MapInput
	Public               pulumi.BoolPtrInput
	// A map of arbitrary strings that, when changed, will force the resource to be replaced.
	Triggers pulumi.MapInput
}

func (PublishImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*publishImageState)(nil)).Elem()
}

type publishImageArgs struct {
	Aliases              []string               `pulumi:"aliases"`
	CompressionAlgorithm *string                `pulumi:"compressionAlgorithm"`
	Container            string                 `pulumi:"container"`
	Filename             *string                `pulumi:"filename"`
	Project              *string                `pulumi:"project"`
	Properties           map[string]interface{} `pulumi:"properties"`
	Public               *bool                  `pulumi:"public"`
	// A map of arbitrary strings that, when changed, will force the resource to be replaced.
	Triggers map[string]interface{} `pulumi:"triggers"`
}

// The set of arguments for constructing a PublishImage resource.
type PublishImageArgs struct {
	Aliases              pulumi.StringArrayInput
	CompressionAlgorithm pulumi.StringPtrInput
	Container            pulumi.StringInput
	Filename             pulumi.StringPtrInput
	Project              pulumi.StringPtrInput
	Properties           pulumi.MapInput
	Public               pulumi.BoolPtrInput
	// A map of arbitrary strings that, when changed, will force the resource to be replaced.
	Triggers pulumi.MapInput
}

func (PublishImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publishImageArgs)(nil)).Elem()
}

type PublishImageInput interface {
	pulumi.Input

	ToPublishImageOutput() PublishImageOutput
	ToPublishImageOutputWithContext(ctx context.Context) PublishImageOutput
}

func (*PublishImage) ElementType() reflect.Type {
	return reflect.TypeOf((**PublishImage)(nil)).Elem()
}

func (i *PublishImage) ToPublishImageOutput() PublishImageOutput {
	return i.ToPublishImageOutputWithContext(context.Background())
}

func (i *PublishImage) ToPublishImageOutputWithContext(ctx context.Context) PublishImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishImageOutput)
}

func (i *PublishImage) ToOutput(ctx context.Context) pulumix.Output[*PublishImage] {
	return pulumix.Output[*PublishImage]{
		OutputState: i.ToPublishImageOutputWithContext(ctx).OutputState,
	}
}

// PublishImageArrayInput is an input type that accepts PublishImageArray and PublishImageArrayOutput values.
// You can construct a concrete instance of `PublishImageArrayInput` via:
//
//	PublishImageArray{ PublishImageArgs{...} }
type PublishImageArrayInput interface {
	pulumi.Input

	ToPublishImageArrayOutput() PublishImageArrayOutput
	ToPublishImageArrayOutputWithContext(context.Context) PublishImageArrayOutput
}

type PublishImageArray []PublishImageInput

func (PublishImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublishImage)(nil)).Elem()
}

func (i PublishImageArray) ToPublishImageArrayOutput() PublishImageArrayOutput {
	return i.ToPublishImageArrayOutputWithContext(context.Background())
}

func (i PublishImageArray) ToPublishImageArrayOutputWithContext(ctx context.Context) PublishImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishImageArrayOutput)
}

func (i PublishImageArray) ToOutput(ctx context.Context) pulumix.Output[[]*PublishImage] {
	return pulumix.Output[[]*PublishImage]{
		OutputState: i.ToPublishImageArrayOutputWithContext(ctx).OutputState,
	}
}

// PublishImageMapInput is an input type that accepts PublishImageMap and PublishImageMapOutput values.
// You can construct a concrete instance of `PublishImageMapInput` via:
//
//	PublishImageMap{ "key": PublishImageArgs{...} }
type PublishImageMapInput interface {
	pulumi.Input

	ToPublishImageMapOutput() PublishImageMapOutput
	ToPublishImageMapOutputWithContext(context.Context) PublishImageMapOutput
}

type PublishImageMap map[string]PublishImageInput

func (PublishImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublishImage)(nil)).Elem()
}

func (i PublishImageMap) ToPublishImageMapOutput() PublishImageMapOutput {
	return i.ToPublishImageMapOutputWithContext(context.Background())
}

func (i PublishImageMap) ToPublishImageMapOutputWithContext(ctx context.Context) PublishImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishImageMapOutput)
}

func (i PublishImageMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*PublishImage] {
	return pulumix.Output[map[string]*PublishImage]{
		OutputState: i.ToPublishImageMapOutputWithContext(ctx).OutputState,
	}
}

type PublishImageOutput struct{ *pulumi.OutputState }

func (PublishImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublishImage)(nil)).Elem()
}

func (o PublishImageOutput) ToPublishImageOutput() PublishImageOutput {
	return o
}

func (o PublishImageOutput) ToPublishImageOutputWithContext(ctx context.Context) PublishImageOutput {
	return o
}

func (o PublishImageOutput) ToOutput(ctx context.Context) pulumix.Output[*PublishImage] {
	return pulumix.Output[*PublishImage]{
		OutputState: o.OutputState,
	}
}

func (o PublishImageOutput) Aliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PublishImage) pulumi.StringArrayOutput { return v.Aliases }).(pulumi.StringArrayOutput)
}

func (o PublishImageOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v *PublishImage) pulumi.StringOutput { return v.Architecture }).(pulumi.StringOutput)
}

func (o PublishImageOutput) CompressionAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublishImage) pulumi.StringPtrOutput { return v.CompressionAlgorithm }).(pulumi.StringPtrOutput)
}

func (o PublishImageOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v *PublishImage) pulumi.StringOutput { return v.Container }).(pulumi.StringOutput)
}

func (o PublishImageOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *PublishImage) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

func (o PublishImageOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublishImage) pulumi.StringPtrOutput { return v.Filename }).(pulumi.StringPtrOutput)
}

func (o PublishImageOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *PublishImage) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

func (o PublishImageOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublishImage) pulumi.StringPtrOutput { return v.Project }).(pulumi.StringPtrOutput)
}

func (o PublishImageOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v *PublishImage) pulumi.MapOutput { return v.Properties }).(pulumi.MapOutput)
}

func (o PublishImageOutput) Public() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PublishImage) pulumi.BoolPtrOutput { return v.Public }).(pulumi.BoolPtrOutput)
}

// A map of arbitrary strings that, when changed, will force the resource to be replaced.
func (o PublishImageOutput) Triggers() pulumi.MapOutput {
	return o.ApplyT(func(v *PublishImage) pulumi.MapOutput { return v.Triggers }).(pulumi.MapOutput)
}

type PublishImageArrayOutput struct{ *pulumi.OutputState }

func (PublishImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublishImage)(nil)).Elem()
}

func (o PublishImageArrayOutput) ToPublishImageArrayOutput() PublishImageArrayOutput {
	return o
}

func (o PublishImageArrayOutput) ToPublishImageArrayOutputWithContext(ctx context.Context) PublishImageArrayOutput {
	return o
}

func (o PublishImageArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*PublishImage] {
	return pulumix.Output[[]*PublishImage]{
		OutputState: o.OutputState,
	}
}

func (o PublishImageArrayOutput) Index(i pulumi.IntInput) PublishImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PublishImage {
		return vs[0].([]*PublishImage)[vs[1].(int)]
	}).(PublishImageOutput)
}

type PublishImageMapOutput struct{ *pulumi.OutputState }

func (PublishImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublishImage)(nil)).Elem()
}

func (o PublishImageMapOutput) ToPublishImageMapOutput() PublishImageMapOutput {
	return o
}

func (o PublishImageMapOutput) ToPublishImageMapOutputWithContext(ctx context.Context) PublishImageMapOutput {
	return o
}

func (o PublishImageMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*PublishImage] {
	return pulumix.Output[map[string]*PublishImage]{
		OutputState: o.OutputState,
	}
}

func (o PublishImageMapOutput) MapIndex(k pulumi.StringInput) PublishImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PublishImage {
		return vs[0].(map[string]*PublishImage)[vs[1].(string)]
	}).(PublishImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublishImageInput)(nil)).Elem(), &PublishImage{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublishImageArrayInput)(nil)).Elem(), PublishImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublishImageMapInput)(nil)).Elem(), PublishImageMap{})
	pulumi.RegisterOutputType(PublishImageOutput{})
	pulumi.RegisterOutputType(PublishImageArrayOutput{})
	pulumi.RegisterOutputType(PublishImageMapOutput{})
}
