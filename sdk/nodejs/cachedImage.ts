// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CachedImage extends pulumi.CustomResource {
    /**
     * Get an existing CachedImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CachedImageState, opts?: pulumi.CustomResourceOptions): CachedImage {
        return new CachedImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lxd:index/cachedImage:CachedImage';

    /**
     * Returns true if the given object is an instance of CachedImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CachedImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CachedImage.__pulumiType;
    }

    public readonly aliases!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly architecture!: pulumi.Output<string>;
    public /*out*/ readonly copiedAliases!: pulumi.Output<string[]>;
    public readonly copyAliases!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly createdAt!: pulumi.Output<number>;
    public /*out*/ readonly fingerprint!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string | undefined>;
    public readonly remote!: pulumi.Output<string | undefined>;
    public readonly sourceImage!: pulumi.Output<string>;
    public readonly sourceRemote!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a CachedImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CachedImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CachedImageArgs | CachedImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CachedImageState | undefined;
            resourceInputs["aliases"] = state ? state.aliases : undefined;
            resourceInputs["architecture"] = state ? state.architecture : undefined;
            resourceInputs["copiedAliases"] = state ? state.copiedAliases : undefined;
            resourceInputs["copyAliases"] = state ? state.copyAliases : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["remote"] = state ? state.remote : undefined;
            resourceInputs["sourceImage"] = state ? state.sourceImage : undefined;
            resourceInputs["sourceRemote"] = state ? state.sourceRemote : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CachedImageArgs | undefined;
            if ((!args || args.sourceImage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceImage'");
            }
            if ((!args || args.sourceRemote === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceRemote'");
            }
            resourceInputs["aliases"] = args ? args.aliases : undefined;
            resourceInputs["copyAliases"] = args ? args.copyAliases : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["remote"] = args ? args.remote : undefined;
            resourceInputs["sourceImage"] = args ? args.sourceImage : undefined;
            resourceInputs["sourceRemote"] = args ? args.sourceRemote : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["architecture"] = undefined /*out*/;
            resourceInputs["copiedAliases"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["fingerprint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CachedImage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CachedImage resources.
 */
export interface CachedImageState {
    aliases?: pulumi.Input<pulumi.Input<string>[]>;
    architecture?: pulumi.Input<string>;
    copiedAliases?: pulumi.Input<pulumi.Input<string>[]>;
    copyAliases?: pulumi.Input<boolean>;
    createdAt?: pulumi.Input<number>;
    fingerprint?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    remote?: pulumi.Input<string>;
    sourceImage?: pulumi.Input<string>;
    sourceRemote?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CachedImage resource.
 */
export interface CachedImageArgs {
    aliases?: pulumi.Input<pulumi.Input<string>[]>;
    copyAliases?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    remote?: pulumi.Input<string>;
    sourceImage: pulumi.Input<string>;
    sourceRemote: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
