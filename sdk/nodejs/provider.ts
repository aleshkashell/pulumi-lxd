// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The provider type for the lxd package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'lxd';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * @deprecated Use `lxd_remote.address` instead.
     */
    public readonly address!: pulumi.Output<string | undefined>;
    /**
     * The directory to look for existing LXD configuration. default = $HOME/snap/lxd/common/config:$HOME/.config/lxc
     */
    public readonly configDir!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Use `lxd_remote.port` instead.
     */
    public readonly port!: pulumi.Output<string | undefined>;
    /**
     * The project where project-scoped resources will be created. Can be overridden in individual resources. default = default
     */
    public readonly project!: pulumi.Output<string | undefined>;
    /**
     * How often to poll during state changes (default 10s)
     */
    public readonly refreshInterval!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Use `lxd_remote.name` instead.
     */
    public readonly remote!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Use `lxd_remote.password` instead.
     */
    public readonly remotePassword!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Use `lxd_remote.scheme` instead.
     */
    public readonly scheme!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["acceptRemoteCertificate"] = pulumi.output(args ? args.acceptRemoteCertificate : undefined).apply(JSON.stringify);
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["configDir"] = args ? args.configDir : undefined;
            resourceInputs["generateClientCertificates"] = pulumi.output(args ? args.generateClientCertificates : undefined).apply(JSON.stringify);
            resourceInputs["lxdRemotes"] = pulumi.output(args ? args.lxdRemotes : undefined).apply(JSON.stringify);
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["refreshInterval"] = args ? args.refreshInterval : undefined;
            resourceInputs["remote"] = args ? args.remote : undefined;
            resourceInputs["remotePassword"] = args?.remotePassword ? pulumi.secret(args.remotePassword) : undefined;
            resourceInputs["scheme"] = args ? args.scheme : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["remotePassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * Accept the server certificate
     */
    acceptRemoteCertificate?: pulumi.Input<boolean>;
    /**
     * @deprecated Use `lxd_remote.address` instead.
     */
    address?: pulumi.Input<string>;
    /**
     * The directory to look for existing LXD configuration. default = $HOME/snap/lxd/common/config:$HOME/.config/lxc
     */
    configDir?: pulumi.Input<string>;
    generateClientCertificates?: pulumi.Input<boolean>;
    lxdRemotes?: pulumi.Input<pulumi.Input<inputs.ProviderLxdRemote>[]>;
    /**
     * @deprecated Use `lxd_remote.port` instead.
     */
    port?: pulumi.Input<string>;
    /**
     * The project where project-scoped resources will be created. Can be overridden in individual resources. default = default
     */
    project?: pulumi.Input<string>;
    /**
     * How often to poll during state changes (default 10s)
     */
    refreshInterval?: pulumi.Input<string>;
    /**
     * @deprecated Use `lxd_remote.name` instead.
     */
    remote?: pulumi.Input<string>;
    /**
     * @deprecated Use `lxd_remote.password` instead.
     */
    remotePassword?: pulumi.Input<string>;
    /**
     * @deprecated Use `lxd_remote.scheme` instead.
     */
    scheme?: pulumi.Input<string>;
}
