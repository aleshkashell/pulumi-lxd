// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lxd:index/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    public readonly config!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly devices!: pulumi.Output<outputs.InstanceDevice[] | undefined>;
    public readonly ephemeral!: pulumi.Output<boolean | undefined>;
    public readonly files!: pulumi.Output<outputs.InstanceFile[] | undefined>;
    public readonly image!: pulumi.Output<string>;
    public /*out*/ readonly ipAddress!: pulumi.Output<string>;
    public /*out*/ readonly ipv4Address!: pulumi.Output<string>;
    public /*out*/ readonly ipv6Address!: pulumi.Output<string>;
    public readonly limits!: pulumi.Output<{[key: string]: any} | undefined>;
    public /*out*/ readonly macAddress!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    /**
     * @deprecated Use a config setting of security.privileged=1 instead
     */
    public readonly privileged!: pulumi.Output<boolean | undefined>;
    public readonly profiles!: pulumi.Output<string[]>;
    public readonly project!: pulumi.Output<string | undefined>;
    public readonly remote!: pulumi.Output<string | undefined>;
    public readonly startOnCreate!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly target!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly waitForNetwork!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["ephemeral"] = state ? state.ephemeral : undefined;
            resourceInputs["files"] = state ? state.files : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["ipv4Address"] = state ? state.ipv4Address : undefined;
            resourceInputs["ipv6Address"] = state ? state.ipv6Address : undefined;
            resourceInputs["limits"] = state ? state.limits : undefined;
            resourceInputs["macAddress"] = state ? state.macAddress : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privileged"] = state ? state.privileged : undefined;
            resourceInputs["profiles"] = state ? state.profiles : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["remote"] = state ? state.remote : undefined;
            resourceInputs["startOnCreate"] = state ? state.startOnCreate : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["waitForNetwork"] = state ? state.waitForNetwork : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.image === undefined) && !opts.urn) {
                throw new Error("Missing required property 'image'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["ephemeral"] = args ? args.ephemeral : undefined;
            resourceInputs["files"] = args ? args.files : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["limits"] = args ? args.limits : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privileged"] = args ? args.privileged : undefined;
            resourceInputs["profiles"] = args ? args.profiles : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["remote"] = args ? args.remote : undefined;
            resourceInputs["startOnCreate"] = args ? args.startOnCreate : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["waitForNetwork"] = args ? args.waitForNetwork : undefined;
            resourceInputs["ipAddress"] = undefined /*out*/;
            resourceInputs["ipv4Address"] = undefined /*out*/;
            resourceInputs["ipv6Address"] = undefined /*out*/;
            resourceInputs["macAddress"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    config?: pulumi.Input<{[key: string]: any}>;
    devices?: pulumi.Input<pulumi.Input<inputs.InstanceDevice>[]>;
    ephemeral?: pulumi.Input<boolean>;
    files?: pulumi.Input<pulumi.Input<inputs.InstanceFile>[]>;
    image?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    ipv4Address?: pulumi.Input<string>;
    ipv6Address?: pulumi.Input<string>;
    limits?: pulumi.Input<{[key: string]: any}>;
    macAddress?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated Use a config setting of security.privileged=1 instead
     */
    privileged?: pulumi.Input<boolean>;
    profiles?: pulumi.Input<pulumi.Input<string>[]>;
    project?: pulumi.Input<string>;
    remote?: pulumi.Input<string>;
    startOnCreate?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    waitForNetwork?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    config?: pulumi.Input<{[key: string]: any}>;
    devices?: pulumi.Input<pulumi.Input<inputs.InstanceDevice>[]>;
    ephemeral?: pulumi.Input<boolean>;
    files?: pulumi.Input<pulumi.Input<inputs.InstanceFile>[]>;
    image: pulumi.Input<string>;
    limits?: pulumi.Input<{[key: string]: any}>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated Use a config setting of security.privileged=1 instead
     */
    privileged?: pulumi.Input<boolean>;
    profiles?: pulumi.Input<pulumi.Input<string>[]>;
    project?: pulumi.Input<string>;
    remote?: pulumi.Input<string>;
    startOnCreate?: pulumi.Input<boolean>;
    target?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    waitForNetwork?: pulumi.Input<boolean>;
}
