// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Lxd
{
    [LxdResourceType("lxd:index/cachedImage:CachedImage")]
    public partial class CachedImage : global::Pulumi.CustomResource
    {
        [Output("aliases")]
        public Output<ImmutableArray<string>> Aliases { get; private set; } = null!;

        [Output("architecture")]
        public Output<string> Architecture { get; private set; } = null!;

        [Output("copiedAliases")]
        public Output<ImmutableArray<string>> CopiedAliases { get; private set; } = null!;

        [Output("copyAliases")]
        public Output<bool?> CopyAliases { get; private set; } = null!;

        [Output("createdAt")]
        public Output<int> CreatedAt { get; private set; } = null!;

        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        [Output("project")]
        public Output<string?> Project { get; private set; } = null!;

        [Output("remote")]
        public Output<string?> Remote { get; private set; } = null!;

        [Output("sourceImage")]
        public Output<string> SourceImage { get; private set; } = null!;

        [Output("sourceRemote")]
        public Output<string> SourceRemote { get; private set; } = null!;

        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a CachedImage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CachedImage(string name, CachedImageArgs args, CustomResourceOptions? options = null)
            : base("lxd:index/cachedImage:CachedImage", name, args ?? new CachedImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CachedImage(string name, Input<string> id, CachedImageState? state = null, CustomResourceOptions? options = null)
            : base("lxd:index/cachedImage:CachedImage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/aleshkashell/pulumi-lxd/releases/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CachedImage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CachedImage Get(string name, Input<string> id, CachedImageState? state = null, CustomResourceOptions? options = null)
        {
            return new CachedImage(name, id, state, options);
        }
    }

    public sealed class CachedImageArgs : global::Pulumi.ResourceArgs
    {
        [Input("aliases")]
        private InputList<string>? _aliases;
        public InputList<string> Aliases
        {
            get => _aliases ?? (_aliases = new InputList<string>());
            set => _aliases = value;
        }

        [Input("copyAliases")]
        public Input<bool>? CopyAliases { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("remote")]
        public Input<string>? Remote { get; set; }

        [Input("sourceImage", required: true)]
        public Input<string> SourceImage { get; set; } = null!;

        [Input("sourceRemote", required: true)]
        public Input<string> SourceRemote { get; set; } = null!;

        [Input("type")]
        public Input<string>? Type { get; set; }

        public CachedImageArgs()
        {
        }
        public static new CachedImageArgs Empty => new CachedImageArgs();
    }

    public sealed class CachedImageState : global::Pulumi.ResourceArgs
    {
        [Input("aliases")]
        private InputList<string>? _aliases;
        public InputList<string> Aliases
        {
            get => _aliases ?? (_aliases = new InputList<string>());
            set => _aliases = value;
        }

        [Input("architecture")]
        public Input<string>? Architecture { get; set; }

        [Input("copiedAliases")]
        private InputList<string>? _copiedAliases;
        public InputList<string> CopiedAliases
        {
            get => _copiedAliases ?? (_copiedAliases = new InputList<string>());
            set => _copiedAliases = value;
        }

        [Input("copyAliases")]
        public Input<bool>? CopyAliases { get; set; }

        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("remote")]
        public Input<string>? Remote { get; set; }

        [Input("sourceImage")]
        public Input<string>? SourceImage { get; set; }

        [Input("sourceRemote")]
        public Input<string>? SourceRemote { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public CachedImageState()
        {
        }
        public static new CachedImageState Empty => new CachedImageState();
    }
}
