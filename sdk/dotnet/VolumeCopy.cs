// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Lxd
{
    [LxdResourceType("lxd:index/volumeCopy:VolumeCopy")]
    public partial class VolumeCopy : global::Pulumi.CustomResource
    {
        [Output("config")]
        public Output<ImmutableDictionary<string, object>> Config { get; private set; } = null!;

        [Output("contentType")]
        public Output<string> ContentType { get; private set; } = null!;

        [Output("expandedConfig")]
        public Output<ImmutableDictionary<string, object>> ExpandedConfig { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the destination volume.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The destination pool.
        /// </summary>
        [Output("pool")]
        public Output<string> Pool { get; private set; } = null!;

        /// <summary>
        /// The destination remote.
        /// </summary>
        [Output("remote")]
        public Output<string?> Remote { get; private set; } = null!;

        /// <summary>
        /// The name of the source volume.
        /// </summary>
        [Output("sourceName")]
        public Output<string> SourceName { get; private set; } = null!;

        /// <summary>
        /// The source pool.
        /// </summary>
        [Output("sourcePool")]
        public Output<string> SourcePool { get; private set; } = null!;

        /// <summary>
        /// The remote from which the source volume is copied.
        /// </summary>
        [Output("sourceRemote")]
        public Output<string?> SourceRemote { get; private set; } = null!;

        [Output("target")]
        public Output<string?> Target { get; private set; } = null!;


        /// <summary>
        /// Create a VolumeCopy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VolumeCopy(string name, VolumeCopyArgs args, CustomResourceOptions? options = null)
            : base("lxd:index/volumeCopy:VolumeCopy", name, args ?? new VolumeCopyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VolumeCopy(string name, Input<string> id, VolumeCopyState? state = null, CustomResourceOptions? options = null)
            : base("lxd:index/volumeCopy:VolumeCopy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/aleshkashell/pulumi-lxd/releases/download/v0.0.1/pulumi-resource-lxd",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VolumeCopy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VolumeCopy Get(string name, Input<string> id, VolumeCopyState? state = null, CustomResourceOptions? options = null)
        {
            return new VolumeCopy(name, id, state, options);
        }
    }

    public sealed class VolumeCopyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the destination volume.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The destination pool.
        /// </summary>
        [Input("pool", required: true)]
        public Input<string> Pool { get; set; } = null!;

        /// <summary>
        /// The destination remote.
        /// </summary>
        [Input("remote")]
        public Input<string>? Remote { get; set; }

        /// <summary>
        /// The name of the source volume.
        /// </summary>
        [Input("sourceName", required: true)]
        public Input<string> SourceName { get; set; } = null!;

        /// <summary>
        /// The source pool.
        /// </summary>
        [Input("sourcePool", required: true)]
        public Input<string> SourcePool { get; set; } = null!;

        /// <summary>
        /// The remote from which the source volume is copied.
        /// </summary>
        [Input("sourceRemote")]
        public Input<string>? SourceRemote { get; set; }

        [Input("target")]
        public Input<string>? Target { get; set; }

        public VolumeCopyArgs()
        {
        }
        public static new VolumeCopyArgs Empty => new VolumeCopyArgs();
    }

    public sealed class VolumeCopyState : global::Pulumi.ResourceArgs
    {
        [Input("config")]
        private InputMap<object>? _config;
        public InputMap<object> Config
        {
            get => _config ?? (_config = new InputMap<object>());
            set => _config = value;
        }

        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("expandedConfig")]
        private InputMap<object>? _expandedConfig;
        public InputMap<object> ExpandedConfig
        {
            get => _expandedConfig ?? (_expandedConfig = new InputMap<object>());
            set => _expandedConfig = value;
        }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the destination volume.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The destination pool.
        /// </summary>
        [Input("pool")]
        public Input<string>? Pool { get; set; }

        /// <summary>
        /// The destination remote.
        /// </summary>
        [Input("remote")]
        public Input<string>? Remote { get; set; }

        /// <summary>
        /// The name of the source volume.
        /// </summary>
        [Input("sourceName")]
        public Input<string>? SourceName { get; set; }

        /// <summary>
        /// The source pool.
        /// </summary>
        [Input("sourcePool")]
        public Input<string>? SourcePool { get; set; }

        /// <summary>
        /// The remote from which the source volume is copied.
        /// </summary>
        [Input("sourceRemote")]
        public Input<string>? SourceRemote { get; set; }

        [Input("target")]
        public Input<string>? Target { get; set; }

        public VolumeCopyState()
        {
        }
        public static new VolumeCopyState Empty => new VolumeCopyState();
    }
}
