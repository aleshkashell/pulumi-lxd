# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 accept_remote_certificate: Optional[pulumi.Input[bool]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 config_dir: Optional[pulumi.Input[str]] = None,
                 generate_client_certificates: Optional[pulumi.Input[bool]] = None,
                 lxd_remotes: Optional[pulumi.Input[Sequence[pulumi.Input['ProviderLxdRemoteArgs']]]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 refresh_interval: Optional[pulumi.Input[str]] = None,
                 remote: Optional[pulumi.Input[str]] = None,
                 remote_password: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[bool] accept_remote_certificate: Accept the server certificate
        :param pulumi.Input[str] config_dir: The directory to look for existing LXD configuration. default = $HOME/snap/lxd/common/config:$HOME/.config/lxc
        :param pulumi.Input[str] project: The project where project-scoped resources will be created. Can be overridden in individual resources. default = default
        :param pulumi.Input[str] refresh_interval: How often to poll during state changes (default 10s)
        """
        ProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            accept_remote_certificate=accept_remote_certificate,
            address=address,
            config_dir=config_dir,
            generate_client_certificates=generate_client_certificates,
            lxd_remotes=lxd_remotes,
            port=port,
            project=project,
            refresh_interval=refresh_interval,
            remote=remote,
            remote_password=remote_password,
            scheme=scheme,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             accept_remote_certificate: Optional[pulumi.Input[bool]] = None,
             address: Optional[pulumi.Input[str]] = None,
             config_dir: Optional[pulumi.Input[str]] = None,
             generate_client_certificates: Optional[pulumi.Input[bool]] = None,
             lxd_remotes: Optional[pulumi.Input[Sequence[pulumi.Input['ProviderLxdRemoteArgs']]]] = None,
             port: Optional[pulumi.Input[str]] = None,
             project: Optional[pulumi.Input[str]] = None,
             refresh_interval: Optional[pulumi.Input[str]] = None,
             remote: Optional[pulumi.Input[str]] = None,
             remote_password: Optional[pulumi.Input[str]] = None,
             scheme: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'acceptRemoteCertificate' in kwargs:
            accept_remote_certificate = kwargs['acceptRemoteCertificate']
        if 'configDir' in kwargs:
            config_dir = kwargs['configDir']
        if 'generateClientCertificates' in kwargs:
            generate_client_certificates = kwargs['generateClientCertificates']
        if 'lxdRemotes' in kwargs:
            lxd_remotes = kwargs['lxdRemotes']
        if 'refreshInterval' in kwargs:
            refresh_interval = kwargs['refreshInterval']
        if 'remotePassword' in kwargs:
            remote_password = kwargs['remotePassword']

        if accept_remote_certificate is not None:
            _setter("accept_remote_certificate", accept_remote_certificate)
        if address is not None:
            warnings.warn("""Use `lxd_remote.address` instead.""", DeprecationWarning)
            pulumi.log.warn("""address is deprecated: Use `lxd_remote.address` instead.""")
        if address is not None:
            _setter("address", address)
        if config_dir is not None:
            _setter("config_dir", config_dir)
        if generate_client_certificates is not None:
            _setter("generate_client_certificates", generate_client_certificates)
        if lxd_remotes is not None:
            _setter("lxd_remotes", lxd_remotes)
        if port is not None:
            warnings.warn("""Use `lxd_remote.port` instead.""", DeprecationWarning)
            pulumi.log.warn("""port is deprecated: Use `lxd_remote.port` instead.""")
        if port is not None:
            _setter("port", port)
        if project is not None:
            _setter("project", project)
        if refresh_interval is not None:
            _setter("refresh_interval", refresh_interval)
        if remote is not None:
            warnings.warn("""Use `lxd_remote.name` instead.""", DeprecationWarning)
            pulumi.log.warn("""remote is deprecated: Use `lxd_remote.name` instead.""")
        if remote is not None:
            _setter("remote", remote)
        if remote_password is not None:
            warnings.warn("""Use `lxd_remote.password` instead.""", DeprecationWarning)
            pulumi.log.warn("""remote_password is deprecated: Use `lxd_remote.password` instead.""")
        if remote_password is not None:
            _setter("remote_password", remote_password)
        if scheme is not None:
            warnings.warn("""Use `lxd_remote.scheme` instead.""", DeprecationWarning)
            pulumi.log.warn("""scheme is deprecated: Use `lxd_remote.scheme` instead.""")
        if scheme is not None:
            _setter("scheme", scheme)

    @property
    @pulumi.getter(name="acceptRemoteCertificate")
    def accept_remote_certificate(self) -> Optional[pulumi.Input[bool]]:
        """
        Accept the server certificate
        """
        return pulumi.get(self, "accept_remote_certificate")

    @accept_remote_certificate.setter
    def accept_remote_certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept_remote_certificate", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""Use `lxd_remote.address` instead.""", DeprecationWarning)
        pulumi.log.warn("""address is deprecated: Use `lxd_remote.address` instead.""")

        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="configDir")
    def config_dir(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to look for existing LXD configuration. default = $HOME/snap/lxd/common/config:$HOME/.config/lxc
        """
        return pulumi.get(self, "config_dir")

    @config_dir.setter
    def config_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_dir", value)

    @property
    @pulumi.getter(name="generateClientCertificates")
    def generate_client_certificates(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "generate_client_certificates")

    @generate_client_certificates.setter
    def generate_client_certificates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "generate_client_certificates", value)

    @property
    @pulumi.getter(name="lxdRemotes")
    def lxd_remotes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProviderLxdRemoteArgs']]]]:
        return pulumi.get(self, "lxd_remotes")

    @lxd_remotes.setter
    def lxd_remotes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProviderLxdRemoteArgs']]]]):
        pulumi.set(self, "lxd_remotes", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""Use `lxd_remote.port` instead.""", DeprecationWarning)
        pulumi.log.warn("""port is deprecated: Use `lxd_remote.port` instead.""")

        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The project where project-scoped resources will be created. Can be overridden in individual resources. default = default
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="refreshInterval")
    def refresh_interval(self) -> Optional[pulumi.Input[str]]:
        """
        How often to poll during state changes (default 10s)
        """
        return pulumi.get(self, "refresh_interval")

    @refresh_interval.setter
    def refresh_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_interval", value)

    @property
    @pulumi.getter
    def remote(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""Use `lxd_remote.name` instead.""", DeprecationWarning)
        pulumi.log.warn("""remote is deprecated: Use `lxd_remote.name` instead.""")

        return pulumi.get(self, "remote")

    @remote.setter
    def remote(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote", value)

    @property
    @pulumi.getter(name="remotePassword")
    def remote_password(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""Use `lxd_remote.password` instead.""", DeprecationWarning)
        pulumi.log.warn("""remote_password is deprecated: Use `lxd_remote.password` instead.""")

        return pulumi.get(self, "remote_password")

    @remote_password.setter
    def remote_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_password", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""Use `lxd_remote.scheme` instead.""", DeprecationWarning)
        pulumi.log.warn("""scheme is deprecated: Use `lxd_remote.scheme` instead.""")

        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_remote_certificate: Optional[pulumi.Input[bool]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 config_dir: Optional[pulumi.Input[str]] = None,
                 generate_client_certificates: Optional[pulumi.Input[bool]] = None,
                 lxd_remotes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProviderLxdRemoteArgs']]]]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 refresh_interval: Optional[pulumi.Input[str]] = None,
                 remote: Optional[pulumi.Input[str]] = None,
                 remote_password: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the lxd package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] accept_remote_certificate: Accept the server certificate
        :param pulumi.Input[str] config_dir: The directory to look for existing LXD configuration. default = $HOME/snap/lxd/common/config:$HOME/.config/lxc
        :param pulumi.Input[str] project: The project where project-scoped resources will be created. Can be overridden in individual resources. default = default
        :param pulumi.Input[str] refresh_interval: How often to poll during state changes (default 10s)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the lxd package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ProviderArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_remote_certificate: Optional[pulumi.Input[bool]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 config_dir: Optional[pulumi.Input[str]] = None,
                 generate_client_certificates: Optional[pulumi.Input[bool]] = None,
                 lxd_remotes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProviderLxdRemoteArgs']]]]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 refresh_interval: Optional[pulumi.Input[str]] = None,
                 remote: Optional[pulumi.Input[str]] = None,
                 remote_password: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["accept_remote_certificate"] = pulumi.Output.from_input(accept_remote_certificate).apply(pulumi.runtime.to_json) if accept_remote_certificate is not None else None
            __props__.__dict__["address"] = address
            __props__.__dict__["config_dir"] = config_dir
            __props__.__dict__["generate_client_certificates"] = pulumi.Output.from_input(generate_client_certificates).apply(pulumi.runtime.to_json) if generate_client_certificates is not None else None
            __props__.__dict__["lxd_remotes"] = pulumi.Output.from_input(lxd_remotes).apply(pulumi.runtime.to_json) if lxd_remotes is not None else None
            __props__.__dict__["port"] = port
            __props__.__dict__["project"] = project
            __props__.__dict__["refresh_interval"] = refresh_interval
            __props__.__dict__["remote"] = remote
            __props__.__dict__["remote_password"] = None if remote_password is None else pulumi.Output.secret(remote_password)
            __props__.__dict__["scheme"] = scheme
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["remotePassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'lxd',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Output[Optional[str]]:
        warnings.warn("""Use `lxd_remote.address` instead.""", DeprecationWarning)
        pulumi.log.warn("""address is deprecated: Use `lxd_remote.address` instead.""")

        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="configDir")
    def config_dir(self) -> pulumi.Output[Optional[str]]:
        """
        The directory to look for existing LXD configuration. default = $HOME/snap/lxd/common/config:$HOME/.config/lxc
        """
        return pulumi.get(self, "config_dir")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[str]]:
        warnings.warn("""Use `lxd_remote.port` instead.""", DeprecationWarning)
        pulumi.log.warn("""port is deprecated: Use `lxd_remote.port` instead.""")

        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[Optional[str]]:
        """
        The project where project-scoped resources will be created. Can be overridden in individual resources. default = default
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="refreshInterval")
    def refresh_interval(self) -> pulumi.Output[Optional[str]]:
        """
        How often to poll during state changes (default 10s)
        """
        return pulumi.get(self, "refresh_interval")

    @property
    @pulumi.getter
    def remote(self) -> pulumi.Output[Optional[str]]:
        warnings.warn("""Use `lxd_remote.name` instead.""", DeprecationWarning)
        pulumi.log.warn("""remote is deprecated: Use `lxd_remote.name` instead.""")

        return pulumi.get(self, "remote")

    @property
    @pulumi.getter(name="remotePassword")
    def remote_password(self) -> pulumi.Output[Optional[str]]:
        warnings.warn("""Use `lxd_remote.password` instead.""", DeprecationWarning)
        pulumi.log.warn("""remote_password is deprecated: Use `lxd_remote.password` instead.""")

        return pulumi.get(self, "remote_password")

    @property
    @pulumi.getter
    def scheme(self) -> pulumi.Output[Optional[str]]:
        warnings.warn("""Use `lxd_remote.scheme` instead.""", DeprecationWarning)
        pulumi.log.warn("""scheme is deprecated: Use `lxd_remote.scheme` instead.""")

        return pulumi.get(self, "scheme")

