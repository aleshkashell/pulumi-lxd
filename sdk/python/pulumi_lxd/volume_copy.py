# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VolumeCopyArgs', 'VolumeCopy']

@pulumi.input_type
class VolumeCopyArgs:
    def __init__(__self__, *,
                 pool: pulumi.Input[str],
                 source_name: pulumi.Input[str],
                 source_pool: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 remote: Optional[pulumi.Input[str]] = None,
                 source_remote: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VolumeCopy resource.
        :param pulumi.Input[str] pool: The destination pool.
        :param pulumi.Input[str] source_name: The name of the source volume.
        :param pulumi.Input[str] source_pool: The source pool.
        :param pulumi.Input[str] name: The name of the destination volume.
        :param pulumi.Input[str] remote: The destination remote.
        :param pulumi.Input[str] source_remote: The remote from which the source volume is copied.
        """
        VolumeCopyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pool=pool,
            source_name=source_name,
            source_pool=source_pool,
            name=name,
            remote=remote,
            source_remote=source_remote,
            target=target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pool: pulumi.Input[str],
             source_name: pulumi.Input[str],
             source_pool: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             remote: Optional[pulumi.Input[str]] = None,
             source_remote: Optional[pulumi.Input[str]] = None,
             target: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sourceName' in kwargs:
            source_name = kwargs['sourceName']
        if 'sourcePool' in kwargs:
            source_pool = kwargs['sourcePool']
        if 'sourceRemote' in kwargs:
            source_remote = kwargs['sourceRemote']

        _setter("pool", pool)
        _setter("source_name", source_name)
        _setter("source_pool", source_pool)
        if name is not None:
            _setter("name", name)
        if remote is not None:
            _setter("remote", remote)
        if source_remote is not None:
            _setter("source_remote", source_remote)
        if target is not None:
            _setter("target", target)

    @property
    @pulumi.getter
    def pool(self) -> pulumi.Input[str]:
        """
        The destination pool.
        """
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: pulumi.Input[str]):
        pulumi.set(self, "pool", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> pulumi.Input[str]:
        """
        The name of the source volume.
        """
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter(name="sourcePool")
    def source_pool(self) -> pulumi.Input[str]:
        """
        The source pool.
        """
        return pulumi.get(self, "source_pool")

    @source_pool.setter
    def source_pool(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_pool", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the destination volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def remote(self) -> Optional[pulumi.Input[str]]:
        """
        The destination remote.
        """
        return pulumi.get(self, "remote")

    @remote.setter
    def remote(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote", value)

    @property
    @pulumi.getter(name="sourceRemote")
    def source_remote(self) -> Optional[pulumi.Input[str]]:
        """
        The remote from which the source volume is copied.
        """
        return pulumi.get(self, "source_remote")

    @source_remote.setter
    def source_remote(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_remote", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class _VolumeCopyState:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 expanded_config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 remote: Optional[pulumi.Input[str]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 source_pool: Optional[pulumi.Input[str]] = None,
                 source_remote: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VolumeCopy resources.
        :param pulumi.Input[str] name: The name of the destination volume.
        :param pulumi.Input[str] pool: The destination pool.
        :param pulumi.Input[str] remote: The destination remote.
        :param pulumi.Input[str] source_name: The name of the source volume.
        :param pulumi.Input[str] source_pool: The source pool.
        :param pulumi.Input[str] source_remote: The remote from which the source volume is copied.
        """
        _VolumeCopyState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config=config,
            content_type=content_type,
            expanded_config=expanded_config,
            location=location,
            name=name,
            pool=pool,
            remote=remote,
            source_name=source_name,
            source_pool=source_pool,
            source_remote=source_remote,
            target=target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             content_type: Optional[pulumi.Input[str]] = None,
             expanded_config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             location: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             pool: Optional[pulumi.Input[str]] = None,
             remote: Optional[pulumi.Input[str]] = None,
             source_name: Optional[pulumi.Input[str]] = None,
             source_pool: Optional[pulumi.Input[str]] = None,
             source_remote: Optional[pulumi.Input[str]] = None,
             target: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'expandedConfig' in kwargs:
            expanded_config = kwargs['expandedConfig']
        if 'sourceName' in kwargs:
            source_name = kwargs['sourceName']
        if 'sourcePool' in kwargs:
            source_pool = kwargs['sourcePool']
        if 'sourceRemote' in kwargs:
            source_remote = kwargs['sourceRemote']

        if config is not None:
            _setter("config", config)
        if content_type is not None:
            _setter("content_type", content_type)
        if expanded_config is not None:
            _setter("expanded_config", expanded_config)
        if location is not None:
            _setter("location", location)
        if name is not None:
            _setter("name", name)
        if pool is not None:
            _setter("pool", pool)
        if remote is not None:
            _setter("remote", remote)
        if source_name is not None:
            _setter("source_name", source_name)
        if source_pool is not None:
            _setter("source_pool", source_pool)
        if source_remote is not None:
            _setter("source_remote", source_remote)
        if target is not None:
            _setter("target", target)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="expandedConfig")
    def expanded_config(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "expanded_config")

    @expanded_config.setter
    def expanded_config(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "expanded_config", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the destination volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pool(self) -> Optional[pulumi.Input[str]]:
        """
        The destination pool.
        """
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pool", value)

    @property
    @pulumi.getter
    def remote(self) -> Optional[pulumi.Input[str]]:
        """
        The destination remote.
        """
        return pulumi.get(self, "remote")

    @remote.setter
    def remote(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the source volume.
        """
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter(name="sourcePool")
    def source_pool(self) -> Optional[pulumi.Input[str]]:
        """
        The source pool.
        """
        return pulumi.get(self, "source_pool")

    @source_pool.setter
    def source_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_pool", value)

    @property
    @pulumi.getter(name="sourceRemote")
    def source_remote(self) -> Optional[pulumi.Input[str]]:
        """
        The remote from which the source volume is copied.
        """
        return pulumi.get(self, "source_remote")

    @source_remote.setter
    def source_remote(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_remote", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


class VolumeCopy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 remote: Optional[pulumi.Input[str]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 source_pool: Optional[pulumi.Input[str]] = None,
                 source_remote: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VolumeCopy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the destination volume.
        :param pulumi.Input[str] pool: The destination pool.
        :param pulumi.Input[str] remote: The destination remote.
        :param pulumi.Input[str] source_name: The name of the source volume.
        :param pulumi.Input[str] source_pool: The source pool.
        :param pulumi.Input[str] source_remote: The remote from which the source volume is copied.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VolumeCopyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VolumeCopy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VolumeCopyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VolumeCopyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            VolumeCopyArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 remote: Optional[pulumi.Input[str]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 source_pool: Optional[pulumi.Input[str]] = None,
                 source_remote: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VolumeCopyArgs.__new__(VolumeCopyArgs)

            __props__.__dict__["name"] = name
            if pool is None and not opts.urn:
                raise TypeError("Missing required property 'pool'")
            __props__.__dict__["pool"] = pool
            __props__.__dict__["remote"] = remote
            if source_name is None and not opts.urn:
                raise TypeError("Missing required property 'source_name'")
            __props__.__dict__["source_name"] = source_name
            if source_pool is None and not opts.urn:
                raise TypeError("Missing required property 'source_pool'")
            __props__.__dict__["source_pool"] = source_pool
            __props__.__dict__["source_remote"] = source_remote
            __props__.__dict__["target"] = target
            __props__.__dict__["config"] = None
            __props__.__dict__["content_type"] = None
            __props__.__dict__["expanded_config"] = None
            __props__.__dict__["location"] = None
        super(VolumeCopy, __self__).__init__(
            'lxd:index/volumeCopy:VolumeCopy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            content_type: Optional[pulumi.Input[str]] = None,
            expanded_config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            pool: Optional[pulumi.Input[str]] = None,
            remote: Optional[pulumi.Input[str]] = None,
            source_name: Optional[pulumi.Input[str]] = None,
            source_pool: Optional[pulumi.Input[str]] = None,
            source_remote: Optional[pulumi.Input[str]] = None,
            target: Optional[pulumi.Input[str]] = None) -> 'VolumeCopy':
        """
        Get an existing VolumeCopy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the destination volume.
        :param pulumi.Input[str] pool: The destination pool.
        :param pulumi.Input[str] remote: The destination remote.
        :param pulumi.Input[str] source_name: The name of the source volume.
        :param pulumi.Input[str] source_pool: The source pool.
        :param pulumi.Input[str] source_remote: The remote from which the source volume is copied.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VolumeCopyState.__new__(_VolumeCopyState)

        __props__.__dict__["config"] = config
        __props__.__dict__["content_type"] = content_type
        __props__.__dict__["expanded_config"] = expanded_config
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["pool"] = pool
        __props__.__dict__["remote"] = remote
        __props__.__dict__["source_name"] = source_name
        __props__.__dict__["source_pool"] = source_pool
        __props__.__dict__["source_remote"] = source_remote
        __props__.__dict__["target"] = target
        return VolumeCopy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[Mapping[str, Any]]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="expandedConfig")
    def expanded_config(self) -> pulumi.Output[Mapping[str, Any]]:
        return pulumi.get(self, "expanded_config")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the destination volume.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def pool(self) -> pulumi.Output[str]:
        """
        The destination pool.
        """
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter
    def remote(self) -> pulumi.Output[Optional[str]]:
        """
        The destination remote.
        """
        return pulumi.get(self, "remote")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> pulumi.Output[str]:
        """
        The name of the source volume.
        """
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter(name="sourcePool")
    def source_pool(self) -> pulumi.Output[str]:
        """
        The source pool.
        """
        return pulumi.get(self, "source_pool")

    @property
    @pulumi.getter(name="sourceRemote")
    def source_remote(self) -> pulumi.Output[Optional[str]]:
        """
        The remote from which the source volume is copied.
        """
        return pulumi.get(self, "source_remote")

    @property
    @pulumi.getter
    def target(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "target")

